#!/usr/bin/env bash

# common - Common functions for gbox commands
# This file should be sourced by other gbox scripts

# Prevent multiple sourcing
[[ -n "$GBOX_COMMON_SOURCED" ]] && return
GBOX_COMMON_SOURCED=1

# Define common paths
GBOX_CLUSTER=${GBOX_CLUSTER:-"gbox"}
GBOX_HOME=${GBOX_HOME:-"$HOME/.gbox"}
GBOX_KUBECFG=${GBOX_KUBECFG:-"$GBOX_HOME/kubeconfig"}

# Debug mode - set to true for verbose output
DEBUG=${DEBUG:-false}

# Debug logging function
debug_log() {
    if [[ "$DEBUG" == "true" ]]; then
        echo "$@"
    fi
}

# Get repo root directory
REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
ENV_FILE="$REPO_ROOT/.env"

# Load configurations from .env file if it exists
# Usage: load_dotenv [env_file_path]
load_dotenv() {
    local env_file="${1:-$ENV_FILE}"
    
    if [[ -f "$env_file" ]]; then
        debug_log "Loading configuration from $env_file"
        
        # Source the .env file directly
        source "$env_file"
    else
        debug_log "No .env file found at $env_file, using environment variables"
    fi
}

# Common help message handler
# Usage: show_help <help_type> <cmd_name> <cmd_short_desc> <cmd_usage> <cmd_commands> <cmd_args> <cmd_examples>
show_help() {
    local help_type="${1:-all}"
    local cmd_name="$2"
    local cmd_short_desc="$3"
    local cmd_usage="$4"
    local cmd_commands="$5"
    local cmd_args="$6"
    local cmd_examples="$7"
    
    case "$help_type" in
        short)
            echo "$cmd_short_desc"
            return 0
            ;;
        all)
            # Build help message dynamically based on available content
            local help_msg="Usage: $cmd_usage\n"

            if [ -n "$cmd_args" ]; then
                help_msg+="\nArguments:\n$cmd_args"
            fi

            if [ -n "$cmd_commands" ]; then
                help_msg+="\n\nCommands:\n$cmd_commands"
            fi

            help_msg+="\n\nOptions:\n    --help [short|all]  Show this help message (default: all)"

            if [ -n "$cmd_examples" ]; then
                help_msg+="\n\nExamples:\n$cmd_examples"
            fi

            echo -e "$help_msg"
            ;;
        *)
            echo "Invalid help type: $help_type" >&2
            echo "Valid types are: short, all" >&2
            return 1
            ;;
    esac
}

# Common help command handler
# Usage: handle_help_command <cmd> <args...>
handle_help_command() {
    case "$1" in
        --help|help)
            help "${2:-all}"
            exit 0
            ;;
        "")
            help "all"
            exit 0
            ;;
        *)
            return 1
            ;;
    esac
} 