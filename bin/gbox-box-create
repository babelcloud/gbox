#!/usr/bin/env bash

# gbox-box-create - Create a new box

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common"

# Command specific help content
CMD_NAME="gbox box create"
CMD_SHORT_DESC="Create a new box"
CMD_USAGE="gbox box create [options] [--] <command> [args...]"

CMD_OPTIONS=$(cat <<'EOF'
    --output          Output format (json or text, default: text)
    --image           Container image
    --env             Environment variable in KEY=VALUE format
    -w, --work-dir    Working directory
    -l, --label       Custom label in KEY=VALUE format
    --                Command and its arguments
EOF
)

CMD_EXAMPLES=$(cat <<'EOF'
    gbox box create --image python:3.9 -- python3 -c 'print("Hello")'
    gbox box create --env PATH=/usr/local/bin:/usr/bin:/bin -w /app -- node server.js
    gbox box create --label project=myapp --label env=prod -- python3 server.py
EOF
)

# Help message wrapper
help() {
    show_help "${1:-all}" "$CMD_NAME" "$CMD_SHORT_DESC" "$CMD_USAGE" "$CMD_OPTIONS" "$CMD_EXAMPLES"
}

# Main function
main() {
    local output_format="text"
    local image=""
    local cmd=""
    local args=()
    local env=()
    local labels=()
    local working_dir=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --help)
                help "$2"
                exit 0
                ;;
            --output)
                shift
                if [[ "$1" != "json" && "$1" != "text" ]]; then
                    echo "Error: Invalid output format. Must be 'json' or 'text'"
                    exit 1
                fi
                output_format="$1"
                shift
                ;;
            --image)
                shift
                if [[ -z "$1" ]]; then
                    echo "Error: Image name required"
                    exit 1
                fi
                image="$1"
                shift
                ;;
            --env)
                shift
                if [[ -z "$1" ]]; then
                    echo "Error: Environment variable required in KEY=VALUE format"
                    exit 1
                fi
                if [[ ! "$1" =~ ^[A-Za-z_][A-Za-z0-9_]*=.+$ ]]; then
                    echo "Error: Invalid environment variable format. Use KEY=VALUE"
                    exit 1
                fi
                env+=("$1")
                shift
                ;;
            -l|--label)
                shift
                if [[ -z "$1" ]]; then
                    echo "Error: Label required in KEY=VALUE format"
                    exit 1
                fi
                if [[ ! "$1" =~ ^[A-Za-z_][A-Za-z0-9_]*=.+$ ]]; then
                    echo "Error: Invalid label format. Use KEY=VALUE"
                    exit 1
                fi
                labels+=("$1")
                shift
                ;;
            -w|--work-dir)
                shift
                if [[ -z "$1" ]]; then
                    echo "Error: Working directory required"
                    exit 1
                fi
                working_dir="$1"
                shift
                ;;
            --)
                shift
                if [[ $# -gt 0 ]]; then
                    cmd="$1"
                    shift
                    args=("$@")
                    break
                else
                    echo "Error: Command required after --"
                    exit 1
                fi
                ;;
            *)
                echo "Error: Unknown option $1"
                exit 1
                ;;
        esac
    done

    # Prepare request body using jq
    local request_body
    if [[ -n "$image" ]]; then
        request_body=$(jq -n \
            --arg img "$image" \
            '{
                image: $img
            }')
    else
        request_body="{}"
    fi

    # Add environment variables if specified
    if [[ ${#env[@]} -gt 0 ]]; then
        local env_json="{}"
        for e in "${env[@]}"; do
            local key="${e%%=*}"
            local value="${e#*=}"
            env_json=$(echo "$env_json" | jq --arg k "$key" --arg v "$value" '. + {($k): $v}')
        done
        request_body=$(echo "$request_body" | jq --argjson env "$env_json" '. + {env: $env}')
    fi

    # Add labels if specified
    if [[ ${#labels[@]} -gt 0 ]]; then
        local labels_json="{}"
        for l in "${labels[@]}"; do
            local key="${l%%=*}"
            local value="${l#*=}"
            labels_json=$(echo "$labels_json" | jq --arg k "$key" --arg v "$value" '. + {($k): $v}')
        done
        request_body=$(echo "$request_body" | jq --argjson labels "$labels_json" '. + {labels: $labels}')
    fi

    # Add command if specified
    if [[ -n "$cmd" || ${#args[@]} -gt 0 || -n "$working_dir" ]]; then
        if [[ -n "$cmd" ]]; then
            request_body=$(echo "$request_body" | jq --arg cmd "$cmd" '. + {cmd: $cmd}')
        fi
        if [[ ${#args[@]} -gt 0 ]]; then
            local args_json="[]"
            for a in "${args[@]}"; do
                args_json=$(echo "$args_json" | jq --arg arg "$a" '. + [$arg]')
            done
            request_body=$(echo "$request_body" | jq --argjson args "$args_json" '. + {args: $args}')
        fi
        if [[ -n "$working_dir" ]]; then
            request_body=$(echo "$request_body" | jq --arg dir "$working_dir" '. + {workingDir: $dir}')
        fi
    fi

    # Debug: Print request body if in debug mode
    if [[ "$DEBUG" == "true" ]]; then
        echo "Request body:" >&2
        echo "$request_body" | jq '.' >&2
    fi

    # Call API server to create box
    local api_url="http://localhost:28080/api/v1/boxes"
    local response
    
    # Make API call and handle potential errors
    if ! response=$(curl -s -f -X POST -H "Content-Type: application/json" -d "$request_body" "$api_url"); then
        echo "Error: Failed to connect to API server at $api_url" >&2
        if [[ "$DEBUG" == "true" ]]; then
            echo "Response:" >&2
            echo "$response" >&2
        fi
        exit 1
    fi

    # Output based on format
    if [[ "$output_format" == "json" ]]; then
        echo "$response"
    else
        echo "$response" | jq -r '"Box created with ID \"\(.id)\""'
    fi
}

# Execute main function with all arguments
main "$@" 