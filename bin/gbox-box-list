#!/usr/bin/env bash

# gbox-box-list - List all available boxes

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common"

# Command specific help content
CMD_NAME="gbox box list"
CMD_SHORT_DESC="List all available boxes"
CMD_USAGE="gbox box list [options]"

CMD_OPTIONS=$(cat <<'EOF'
    --output          Output format (json or text, default: text)
    -f, --filter      Filter boxes (format: field=value)
                      Supported fields: id, label, ancestor
                      Examples:
                      -f 'id=abc123'
                      -f 'label=project=myapp'
                      -f 'ancestor=ubuntu:latest'
EOF
)

CMD_EXAMPLES=$(cat <<'EOF'
    gbox box list                              # List all boxes
    gbox box list --output json                # List boxes in JSON format
    gbox box list -f 'label=project=myapp'     # List boxes with project=myapp label
    gbox box list -f 'ancestor=ubuntu:latest'  # List boxes using ubuntu:latest image
EOF
)

# Help message wrapper
help() {
    show_help "${1:-all}" "$CMD_NAME" "$CMD_SHORT_DESC" "$CMD_USAGE" "$CMD_OPTIONS" "$CMD_EXAMPLES"
}

# Parse arguments
output_format="text"
filters=()

while [[ $# -gt 0 ]]; do
    case "$1" in
        --help)
            help "${2:-all}"
            exit 0
            ;;
        --output)
            shift
            if [[ "$1" != "json" && "$1" != "text" ]]; then
                echo "Error: Invalid output format. Must be 'json' or 'text'"
                exit 1
            fi
            output_format="$1"
            shift
            ;;
        -f|--filter)
            shift
            if [[ -z "$1" ]]; then
                echo "Error: Filter value required"
                exit 1
            fi
            if [[ ! "$1" =~ ^([a-zA-Z_][a-zA-Z0-9_]*)=(.+)$ ]]; then
                echo "Error: Invalid filter format. Use field=value"
                exit 1
            fi
            filters+=("$1")
            shift
            ;;
        *)
            echo "Error: Unknown option $1"
            exit 1
            ;;
    esac
done

# Build query parameters for filters
query_params=""
if [[ ${#filters[@]} -gt 0 ]]; then
    for f in "${filters[@]}"; do
        if [[ "$f" =~ ^([a-zA-Z_][a-zA-Z0-9_]*)=(.+)$ ]]; then
            field="${BASH_REMATCH[1]}"
            value="${BASH_REMATCH[2]}"
            
            # URL encode the value
            value=$(printf '%s' "$value" | jq -sRr @uri)
            
            if [[ -z "$query_params" ]]; then
                query_params="?filter=$field=$value"
            else
                query_params="$query_params&filter=$field=$value"
            fi
        fi
    done
fi

# Call API server to list boxes
api_url="http://localhost:28080/api/v1/boxes$query_params"
response=""
http_code=""

# Make API call and handle potential errors
if [[ "$DEBUG" == "true" ]]; then
    echo "Making request to: $api_url" >&2
fi

# Use -w to get the HTTP status code and -o to capture the response
response=$(curl -s -w "%{http_code}" "$api_url")
http_code=${response: -3}
response=${response:0:${#response}-3}

if [[ "$DEBUG" == "true" ]]; then
    echo "Response code: $http_code" >&2
    echo "Response body: $response" >&2
fi

case "$http_code" in
    "200")
        if [[ "$output_format" == "json" ]]; then
            echo "$response"
        else
            # Check if response is empty or has no boxes
            if [[ "$response" == "{\"boxes\":[]}" || -z "$response" || $(echo "$response" | jq '.boxes | length') -eq 0 ]]; then
                echo "No boxes found"
                return
            fi
            
            # Only show header and data if there are results
            echo "ID                                      IMAGE               STATUS"
            echo "---------------------------------------- ------------------- ---------------"
            echo "$response" | jq -r '.boxes[] | "\(.id) \(.image) \(.status)"' | column -t
        fi
        ;;
    "404")
        echo "No boxes found"
        ;;
    *)
        echo "Error: Failed to list boxes (HTTP $http_code)"
        if [[ "$DEBUG" == "true" ]]; then
            echo "Response: $response" >&2
        fi
        exit 1
        ;;
esac 