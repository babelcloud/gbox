#!/usr/bin/env bash

# gbox-mcp - Handles MCP configuration operations
# Usage: gbox-mcp <command> [arguments]

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common"

# Command specific help content
CMD_NAME="gbox mcp"
CMD_SHORT_DESC="Manage MCP configuration operations"
CMD_USAGE="gbox mcp <command>"

CMD_COMMANDS=$(cat <<'EOF'
    export          Export MCP configuration for Claude Desktop
EOF
)

CMD_EXAMPLES=$(cat <<'EOF'
    gbox mcp export         # Export MCP configuration for Claude Desktop
EOF
)

# Help message wrapper
help() {
    show_help "${1:-all}" "$CMD_NAME" "$CMD_SHORT_DESC" "$CMD_USAGE" "$CMD_COMMANDS" "$CMD_EXAMPLES"
}

# Export command
export_config() {
    if [[ "$1" == "--help" ]]; then
        show_help "$2" "gbox mcp export" "Export MCP configuration for Claude Desktop" \
            "gbox mcp export [--merge-to <target>] [--dry-run]" \
            "    --merge-to <target>  Merge configuration into target config file (claude|cursor)" \
            "    --dry-run            Preview merge result without applying changes" \
            "    gbox mcp export                     # Export MCP configuration" \
            "    gbox mcp export --merge-to claude   # Export and merge into Claude Desktop config" \
            "    gbox mcp export --merge-to cursor   # Export and merge into Cursor config" \
            "    gbox mcp export --merge-to claude --dry-run # Preview merge result"
        return
    fi

    # Get the absolute path to the mcp-server dist directory
    local mcp_server_dir="$SCRIPT_DIR/../packages/mcp-server"
    local server_script="$mcp_server_dir/dist/index.js"
    local claude_config="$HOME/Library/Application Support/Claude/claude_desktop_config.json"
    local cursor_config="$HOME/.cursor/mcp.json"
    local dry_run=false
    local merge_target=""

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --dry-run)
                dry_run=true
                shift
                ;;
            --merge-to)
                if [[ -z "$2" ]]; then
                    echo "Error: --merge-to requires a target (claude|cursor)"
                    exit 1
                fi
                merge_target="$2"
                if [[ "$merge_target" != "claude" && "$merge_target" != "cursor" ]]; then
                    echo "Error: --merge-to target must be either 'claude' or 'cursor'"
                    exit 1
                fi
                shift 2
                ;;
            *)
                echo "Error: Invalid parameter '$1'"
                exit 1
                ;;
        esac
    done

    # Check if the server script exists
    if [[ ! -f "$server_script" ]]; then
        echo "Error: Server script not found at $server_script"
        echo "Please build the MCP server first by running:"
        echo "  cd $mcp_server_dir && pnpm build"
        exit 1
    fi

    # Generate the configuration based on DEBUG mode
    local config
    if [[ "$DEBUG" == "true" ]]; then
        config=$(cat <<EOF
{
  "mcpServers": {
    "gbox": {
      "command": "bash",
      "args": [
        "-c",
        "cd $(realpath "$mcp_server_dir") && pnpm --silent dev"
      ]
    }
  }
}
EOF
)
    else
        config=$(cat <<EOF
{
  "mcpServers": {
    "gbox": {
      "command": "node",
      "args": [
        "$(realpath "$server_script")"
      ]
    }
  }
}
EOF
)
    fi

    # Handle merging if specified
    if [[ -n "$merge_target" ]]; then
        local target_config
        case "$merge_target" in
            claude)
                target_config="$claude_config"
                ;;
            cursor)
                target_config="$cursor_config"
                ;;
        esac

        # Create target directory if it doesn't exist
        mkdir -p "$(dirname "$target_config")"

        # Merge the configuration
        local temp_config=$(mktemp)
        echo "$config" > "$temp_config"
        
        if [[ "$dry_run" == "true" ]]; then
            echo "Preview of merged configuration:"
            echo "----------------------------------------"
            if [[ -f "$target_config" ]]; then
                jq -s '.[0] * .[1]' "$target_config" "$temp_config"
            else
                cat "$temp_config"
            fi
        else
            if [[ -f "$target_config" ]]; then
                jq -s '.[0] * .[1]' "$target_config" "$temp_config" > "${target_config}.new"
                mv "${target_config}.new" "$target_config"
            else
                mv "$temp_config" "$target_config"
            fi
            echo "Configuration merged into $target_config"
        fi
    else
        echo "$config"
        echo
        echo "To merge this configuration, run:"
        echo "  gbox mcp export --merge-to claude   # For Claude Desktop"
        echo "  gbox mcp export --merge-to cursor  # For Cursor"
    fi
}

# Main command handler
case "$1" in
    export)
        shift
        export_config "$@"
        ;;
    --help|help)
        help "${2:-all}"
        exit 0
        ;;
    *)
        help
        [[ "$1" != "" ]] && exit 1
        exit 0
        ;;
esac
