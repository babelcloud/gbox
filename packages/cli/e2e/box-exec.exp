#!/usr/bin/expect -f
#
# Test script for gbox box exec command
#

# Set timeout in seconds
set timeout 30

# Define colors for output readability
set GREEN "\033\[0;32m"
set RED "\033\[0;31m"
set YELLOW "\033\[0;33m"
set NC "\033\[0m" ;# No Color

# List to store box IDs created during testing
set test_box_ids {}

# Create a test box for our exec tests
puts "\n${YELLOW}Creating test box for exec command...${NC}"
spawn go run ../main.go box create --image alpine:latest -- sleep 600

# Expect creation to succeed and capture ID
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        set box_id $expect_out(1,string)
        lappend test_box_ids $box_id
        puts "\n${GREEN}PASS: Test box created successfully with ID: $box_id${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Box creation timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Box creation error${NC}\n"
        exit 1
    }
}

# Wait a moment for box to be ready
sleep 2

# Test help information
puts "\n${YELLOW}Testing help display...${NC}"
spawn go run ../main.go box exec --help

# Expect help information
expect {
    "Execute a command in a box" {
        puts "\n${GREEN}PASS: Help information displayed correctly${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting help information timed out${NC}\n"
        exit 1
    }
}

# Test basic exec command (ls)
puts "\n${YELLOW}Testing basic exec command (ls)...${NC}"
spawn go run ../main.go box exec $box_id -- ls -la

# Expect command output
expect {
    "total" {
        puts "\n${GREEN}PASS: Basic exec command successful${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${RED}FAIL: Error executing basic command: $error_msg${NC}\n"
        exit 1
    }
    timeout {
        puts "\n${RED}FAIL: Basic exec command timed out${NC}\n"
        exit 1
    }
}

# Test exec with argument containing special characters
puts "\n${YELLOW}Testing exec with special characters...${NC}"
spawn go run ../main.go box exec $box_id -- echo "Hello, World!"

# Expect command output
expect {
    "Hello, World!" {
        puts "\n${GREEN}PASS: Exec with special characters successful${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${RED}FAIL: Error executing command with special characters: $error_msg${NC}\n"
        exit 1
    }
    timeout {
        puts "\n${RED}FAIL: Command with special characters timed out${NC}\n"
        exit 1
    }
}

# Test creating a file with exec
puts "\n${YELLOW}Testing creating a file with exec...${NC}"
spawn go run ../main.go box exec $box_id -- sh -c "echo 'test content' > /tmp/test-file.txt"

# Expect command to succeed
expect {
    eof {
        puts "\n${GREEN}PASS: File creation exec command completed${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${RED}FAIL: Error creating file: $error_msg${NC}\n"
        exit 1
    }
    timeout {
        puts "\n${RED}FAIL: File creation command timed out${NC}\n"
        exit 1
    }
}

# Test reading the created file
puts "\n${YELLOW}Testing reading created file with exec...${NC}"
spawn go run ../main.go box exec $box_id -- cat /tmp/test-file.txt

# Expect to see file content
expect {
    "test content" {
        puts "\n${GREEN}PASS: Reading file successful${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${RED}FAIL: Error reading created file: $error_msg${NC}\n"
        exit 1
    }
    timeout {
        puts "\n${RED}FAIL: Reading file timed out${NC}\n"
        exit 1
    }
}

# Test exec with non-existent command
puts "\n${YELLOW}Testing exec with non-existent command...${NC}"
spawn go run ../main.go box exec $box_id -- nonexistentcommand

# Expect error message
expect {
    "not found" {
        puts "\n${GREEN}PASS: Non-existent command handled correctly${NC}\n"
    }
    -re "Error:.*" {
        puts "\n${GREEN}PASS: Non-existent command handled correctly with error message${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Non-existent command test timed out${NC}\n"
        exit 1
    }
}

# Test exec with invalid box ID
puts "\n${YELLOW}Testing exec with non-existent box ID...${NC}"
spawn go run ../main.go box exec nonexistent-box-id -- ls

# Expect error message for non-existent box
expect {
    "Box not found" {
        puts "\n${GREEN}PASS: Non-existent box handled correctly${NC}\n"
    }
    "not found" {
        puts "\n${GREEN}PASS: Non-existent box handled correctly${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${GREEN}PASS: Error message displayed for non-existent box: $error_msg${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Non-existent box test timed out${NC}\n"
        exit 1
    }
}

# Test exec with TTY option
puts "\n${YELLOW}Testing exec with TTY option (limited test)...${NC}"
spawn go run ../main.go box exec $box_id -t -- echo "TTY test"

# Expect command output
expect {
    "TTY test" {
        puts "\n${GREEN}PASS: TTY option command successful${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${RED}FAIL: Error executing TTY command: $error_msg${NC}\n"
        exit 1
    }
    timeout {
        puts "\n${RED}FAIL: TTY command timed out${NC}\n"
        exit 1
    }
}

# Test exec with missing -- separator
puts "\n${YELLOW}Testing exec with missing -- separator...${NC}"
spawn go run ../main.go box exec $box_id ls

# Expect error message for missing separator
expect {
    "must be specified after" {
        puts "\n${GREEN}PASS: Missing -- separator handled correctly${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${GREEN}PASS: Error message displayed for missing separator: $error_msg${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Missing separator test timed out${NC}\n"
        exit 1
    }
}

# Test with interactive option (-i)
puts "\n${YELLOW}Testing exec with interactive option (-i)...${NC}"
set input_data "Hello from interactive mode"
spawn go run ../main.go box exec $box_id -i -- cat

# Send data to stdin
sleep 1
send -- "$input_data\r"
send -- "\004" ;# Ctrl+D to end input

# Expect to see the same data echoed back
expect {
    $input_data {
        puts "\n${GREEN}PASS: Interactive mode command successful${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${RED}FAIL: Error executing interactive command: $error_msg${NC}\n"
        exit 1
    }
    timeout {
        puts "\n${RED}FAIL: Interactive command timed out${NC}\n"
        exit 1
    }
}

# Test with both TTY and interactive options (-t -i)
puts "\n${YELLOW}Testing exec with both TTY and interactive options (-t -i)...${NC}"
spawn go run ../main.go box exec $box_id -t -i -- sh

# Send a command to the shell
expect {
    "# " {
        # Shell prompt appeared (more generic match for any prompt ending with "# ")
        send -- "echo \"Combined TTY and interactive test\"\r"
        exp_continue
    }
    "/var/gbox # " {
        # Shell prompt appeared
        send -- "echo \"Combined TTY and interactive test\"\r"
        exp_continue
    }
    "Combined TTY and interactive test" {
        # Command output received
        send -- "exit\r"
        puts "\n${GREEN}PASS: Combined TTY and interactive mode command successful${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${RED}FAIL: Error executing combined TTY and interactive command: $error_msg${NC}\n"
        exit 1
    }
    timeout {
        puts "\n${RED}FAIL: Combined TTY and interactive command timed out${NC}\n"
        exit 1
    }
}

# Test a more complex TTY interaction
puts "\n${YELLOW}Testing more complex TTY interaction...${NC}"
spawn go run ../main.go box exec $box_id -t -- sh

# Expect the shell prompt and send a series of commands
expect {
    "# " {
        # Shell prompt appeared (more generic match)
        puts "\n${GREEN}INFO: Shell prompt received, sending commands...${NC}\n"
        send -- "cd /tmp\r"
        expect {
            "# " {
                send -- "pwd\r"
                expect {
                    "/tmp" {
                        send -- "exit\r"
                        puts "\n${GREEN}PASS: Complex TTY interaction successful${NC}\n"
                    }
                    timeout {
                        puts "\n${RED}FAIL: Complex TTY interaction 'pwd' timed out${NC}\n"
                        exit 1
                    }
                }
            }
            timeout {
                puts "\n${RED}FAIL: Complex TTY interaction 'cd' timed out${NC}\n"
                exit 1
            }
        }
    }
    "/var/gbox # " {
        # Specific shell prompt
        puts "\n${GREEN}INFO: Shell prompt received, sending commands...${NC}\n"
        send -- "cd /tmp\r"
        expect {
            "/tmp # " {
                send -- "pwd\r"
                expect {
                    "/tmp" {
                        send -- "exit\r"
                        puts "\n${GREEN}PASS: Complex TTY interaction successful${NC}\n"
                    }
                    timeout {
                        puts "\n${RED}FAIL: Complex TTY interaction 'pwd' timed out${NC}\n"
                        exit 1
                    }
                }
            }
            timeout {
                puts "\n${RED}FAIL: Complex TTY interaction 'cd' timed out${NC}\n"
                exit 1
            }
        }
    }
    timeout {
        puts "\n${RED}FAIL: Complex TTY interaction initial prompt timed out${NC}\n"
        exit 1
    }
}

# Test long-form flag option (--interactive instead of -i)
puts "\n${YELLOW}Testing exec with long-form flag (--interactive)...${NC}"
set input_data "Testing --interactive flag"
spawn go run ../main.go box exec $box_id --interactive -- cat

# Send data to stdin
sleep 1
send -- "$input_data\r"
send -- "\004" ;# Ctrl+D to end input

# Expect to see the same data echoed back
expect {
    $input_data {
        puts "\n${GREEN}PASS: Long-form flag command successful${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${RED}FAIL: Error executing long-form flag command: $error_msg${NC}\n"
        exit 1
    }
    timeout {
        puts "\n${RED}FAIL: Long-form flag command timed out${NC}\n"
        exit 1
    }
}

# Clean up test box
puts "\n${YELLOW}Cleaning up test box...${NC}"
foreach id $test_box_ids {
    spawn go run ../main.go box delete $id
    expect {
        "deleted successfully" {
            puts "\n${GREEN}PASS: Test box $id deleted successfully${NC}\n"
        }
        "Error:" {
            puts "\n${YELLOW}WARN: Could not delete test box $id, may need manual cleanup${NC}\n"
        }
        timeout {
            puts "\n${YELLOW}WARN: Timeout deleting test box $id, may need manual cleanup${NC}\n"
        }
    }
}

puts "\n${GREEN}All tests completed successfully!${NC}\n"
exit 0 