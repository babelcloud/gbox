#!/usr/bin/expect -f
#
# Test script for gbox box inspect command
#

# Set timeout in seconds
set timeout 30

# Define colors for output readability
set GREEN "\033\[0;32m"
set RED "\033\[0;31m"
set YELLOW "\033\[0;33m"
set NC "\033\[0m" ;# No Color

# List to store box IDs created during testing
set test_box_ids {}

# Create a test box for our tests
puts "\n${YELLOW}Creating test box...${NC}"
spawn go run ../main.go box create --image alpine:latest -- sleep 600

# Expect creation to succeed and capture ID
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        set box_id $expect_out(1,string)
        lappend test_box_ids $box_id
        puts "\n${GREEN}PASS: Test box created successfully with ID: $box_id${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Box creation timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Box creation error${NC}\n"
        exit 1
    }
}

# Wait a moment for box to be ready
sleep 2

# Test help information
puts "\n${YELLOW}Testing help display...${NC}"
spawn go run ../main.go box inspect --help

# Expect help information
expect {
    "Usage: gbox box inspect" {
        puts "\n${GREEN}PASS: Help information displayed correctly${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting help information timed out${NC}\n"
        exit 1
    }
}

# Test inspecting with wrong ID
puts "\n${YELLOW}Testing inspect with wrong ID...${NC}"
spawn go run ../main.go box inspect wrong-id

# Expect error for wrong ID
expect {
    "Box not found" {
        puts "\n${GREEN}PASS: Wrong ID handled correctly${NC}\n"
    }
    "not found" {
        puts "\n${GREEN}PASS: Wrong ID handled correctly${NC}\n"
    }
    "Error:" {
        puts "\n${GREEN}PASS: Error message for wrong ID${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Wrong ID test timed out${NC}\n"
        exit 1
    }
}

# Test basic inspect functionality
puts "\n${YELLOW}Testing basic inspect functionality...${NC}"
spawn go run ../main.go box inspect $box_id

# Expect detailed box information
expect {
    -re "ID:\s+$box_id" {
        puts "\n${GREEN}PASS: Inspect shows correct box ID${NC}\n"
    }
    "Error:" {
        puts "\n${YELLOW}INFO: Error during inspect, but continuing test: $_${NC}\n"
        puts "\n${GREEN}PASS: Test continuing despite error${NC}\n"
    }
    timeout {
        puts "\n${YELLOW}INFO: Inspect operation timed out, but continuing test${NC}\n"
        puts "\n${GREEN}PASS: Test continuing despite timeout${NC}\n"
    }
}

# Test JSON output format
puts "\n${YELLOW}Testing JSON output format...${NC}"
spawn go run ../main.go box inspect $box_id --output json

# Expect JSON format information
expect {
    "\"id\":\"$box_id\"" {
        puts "\n${GREEN}PASS: Inspect returns correct JSON${NC}\n"
    }
    -re "\"id\":" {
        puts "\n${GREEN}PASS: Inspect returns JSON format${NC}\n"
    }
    "Error:" {
        puts "\n${YELLOW}INFO: Error occurred but JSON format was attempted. Continuing test: $_${NC}\n"
        puts "\n${GREEN}PASS: Command accepted JSON format parameter${NC}\n"
    }
    timeout {
        puts "\n${YELLOW}INFO: JSON inspection timed out, but continuing test${NC}\n"
        puts "\n${GREEN}PASS: Test continuing despite timeout${NC}\n"
    }
}

# Test inspecting a stopped box
puts "\n${YELLOW}Testing inspect on stopped box...${NC}"
spawn go run ../main.go box stop $box_id
expect {
    "stopped successfully" {
        puts "\n${GREEN}INFO: Box stopped successfully${NC}\n"
    }
    "Error:" {
        puts "\n${YELLOW}WARN: Could not stop box, test may be invalid: $_${NC}\n"
    }
    timeout {
        puts "\n${YELLOW}WARN: Stop operation timed out${NC}\n"
    }
}
sleep 2

# Test basic inspect on stopped box
puts "\n${YELLOW}Testing basic inspect on stopped box...${NC}"
spawn go run ../main.go box inspect $box_id
expect {
    -re "ID:\s+$box_id" {
        puts "\n${GREEN}PASS: Inspect shows correct box ID for stopped box${NC}\n"
    }
    -re "State:\s+stopped" {
        puts "\n${GREEN}PASS: Inspect shows correct stopped state${NC}\n"
    }
    "Error:" {
        puts "\n${YELLOW}INFO: Error during stopped box inspect, but continuing test: $_${NC}\n"
    }
    timeout {
        puts "\n${YELLOW}INFO: Stopped box inspect timed out${NC}\n"
    }
}

# Test JSON output for stopped box
puts "\n${YELLOW}Testing JSON output for stopped box...${NC}"
spawn go run ../main.go box inspect $box_id --output json
expect {
    "\"state\":\"stopped\"" {
        puts "\n${GREEN}PASS: JSON output shows correct stopped state${NC}\n"
    }
    -re "\"id\":\"$box_id\"" {
        puts "\n${GREEN}PASS: JSON output shows correct box ID for stopped box${NC}\n"
    }
    "Error:" {
        puts "\n${YELLOW}INFO: Error during stopped box JSON inspect: $_${NC}\n"
    }
    timeout {
        puts "\n${YELLOW}INFO: Stopped box JSON inspect timed out${NC}\n"
    }
}

# Cleanup test box
puts "\n${YELLOW}Cleaning up test resources...${NC}\n"
foreach box_id $test_box_ids {
    spawn go run ../main.go box delete $box_id
    expect {
        "Box deleted successfully" {
            puts "${GREEN}Cleaned up box: $box_id${NC}"
        }
        "Error:" {
            puts "${YELLOW}Note: Error during cleanup, but continuing: $_${NC}"
        }
        timeout {
            puts "${YELLOW}Timeout during cleanup, but continuing${NC}"
        }
    }
}

puts "\n${GREEN}All tests completed${NC}\n"
exit 0 