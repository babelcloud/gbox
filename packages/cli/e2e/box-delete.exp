#!/usr/bin/expect -f
#
# Test script for gbox box delete command
#

# Set timeout in seconds
set timeout 10

# Define colors for output readability
set GREEN "\033\[0;32m"
set RED "\033\[0;31m"
set YELLOW "\033\[0;33m"
set NC "\033\[0m" ;# No Color

# List to store box IDs created during testing
set test_box_ids {}

# Test help information
puts "\n${YELLOW}Testing help display...${NC}"
spawn go run ../main.go box delete --help

# Expect help information
expect {
    "Usage: gbox box delete" {
        puts "\n${GREEN}PASS: Help information displayed correctly${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting help information timed out${NC}\n"
        exit 1
    }
}

# Test deleting without arguments
puts "\n${YELLOW}Testing delete without arguments...${NC}"
spawn go run ../main.go box delete

# Expect error message
expect {
    "Error: Must specify either --all or a box ID" {
        puts "\n${GREEN}PASS: Correctly handled missing arguments${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting error message timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${GREEN}PASS: Correctly reported error${NC}\n"
    }
}

# Create test boxes for deletion testing
puts "\n${YELLOW}Creating test boxes for deletion testing...${NC}"

# Create first box
spawn go run ../main.go box create --image alpine:latest -- echo "Test box 1"

# Expect creation to succeed and capture ID
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        set box_id1 $expect_out(1,string)
        lappend test_box_ids $box_id1
        puts "\n${GREEN}PASS: First test box created successfully with ID: $box_id1${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: First box creation timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: First box creation error${NC}\n"
        exit 1
    }
}

# Create second box
spawn go run ../main.go box create --image alpine:latest -- echo "Test box 2"

# Expect creation to succeed and capture ID
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        set box_id2 $expect_out(1,string)
        lappend test_box_ids $box_id2
        puts "\n${GREEN}PASS: Second test box created successfully with ID: $box_id2${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Second box creation timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Second box creation error${NC}\n"
        exit 1
    }
}

# Wait a moment
sleep 2

# Test deleting a specific box
puts "\n${YELLOW}Testing deletion of a specific box...${NC}"
spawn go run ../main.go box delete $box_id1

# Expect successful deletion message
expect {
    "Box deleted successfully" {
        puts "\n${GREEN}PASS: Box deleted successfully${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Box deletion timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error deleting box${NC}\n"
        exit 1
    }
}

# Remove the ID from our list since it's already deleted
set test_box_ids [lsearch -all -inline -not $test_box_ids $box_id1]

# Test deleting a non-existent box
puts "\n${YELLOW}Testing deletion of a non-existent box...${NC}"
spawn go run ../main.go box delete nonexistent-id

# Expect error message
expect {
    "Error: Failed to delete box" {
        puts "\n${GREEN}PASS: Non-existent box error handled correctly${NC}\n"
    }
    "not found" {
        puts "\n${GREEN}PASS: Non-existent box error handled correctly${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Non-existent box deletion timed out${NC}\n"
        exit 1
    }
}

# Create a few more boxes for testing --all option
puts "\n${YELLOW}Creating additional test boxes for --all testing...${NC}"

# Create third box
spawn go run ../main.go box create --image alpine:latest -- echo "Test box 3"

# Expect creation to succeed and capture ID
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        set box_id3 $expect_out(1,string)
        lappend test_box_ids $box_id3
        puts "\n${GREEN}PASS: Third test box created successfully with ID: $box_id3${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Third box creation timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Third box creation error${NC}\n"
        exit 1
    }
}

# Create fourth box
spawn go run ../main.go box create --image alpine:latest -- echo "Test box 4"

# Expect creation to succeed and capture ID
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        set box_id4 $expect_out(1,string)
        lappend test_box_ids $box_id4
        puts "\n${GREEN}PASS: Fourth test box created successfully with ID: $box_id4${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Fourth box creation timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Fourth box creation error${NC}\n"
        exit 1
    }
}

# Test --all with --force option
puts "\n${YELLOW}Testing --all with --force option...${NC}"
spawn go run ../main.go box delete --all --force

# Expect successful deletion message
expect {
    "All boxes deleted successfully" {
        puts "\n${GREEN}PASS: All boxes deleted successfully${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Deleting all boxes timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error deleting all boxes${NC}\n"
        exit 1
    }
}

# Clear our test box IDs since all boxes should now be deleted
set test_box_ids {}

# Create one more box for testing JSON output
puts "\n${YELLOW}Creating test box for JSON output testing...${NC}"
spawn go run ../main.go box create --image alpine:latest -- echo "Test box for JSON output"

# Expect creation to succeed and capture ID
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        set json_box_id $expect_out(1,string)
        lappend test_box_ids $json_box_id
        puts "\n${GREEN}PASS: Test box created successfully with ID: $json_box_id${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Box creation timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Box creation error${NC}\n"
        exit 1
    }
}

# Test JSON output format
puts "\n${YELLOW}Testing JSON output format...${NC}"
spawn go run ../main.go box delete $json_box_id --output json

# Expect JSON format response
expect {
    -re "\"status\":\"success\"" {
        puts "\n${GREEN}PASS: Received JSON format response${NC}\n"
    }
    -re "\"message\":" {
        puts "\n${GREEN}PASS: Received JSON format response${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting JSON response timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error getting JSON response${NC}\n"
        exit 1
    }
}

# Test specifying both box ID and --all (should fail)
puts "\n${YELLOW}Testing specifying both box ID and --all...${NC}"
spawn go run ../main.go box delete some-id --all

# Expect error message
expect {
    "Error: Cannot specify both --all and a box ID" {
        puts "\n${GREEN}PASS: Correctly handled conflicting arguments${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting error message timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${GREEN}PASS: Correctly reported error${NC}\n"
    }
}

# Clean up any remaining resources (should be none, but just in case)
if {[llength $test_box_ids] > 0} {
    puts "\n${YELLOW}Cleaning up any remaining test resources...${NC}\n"
    foreach box_id $test_box_ids {
        spawn go run ../main.go box delete $box_id --force
        expect {
            "Box deleted successfully" {
                puts "${GREEN}Cleaned up box: $box_id${NC}"
            }
            "Error:" {
                # Box may already be deleted
                puts "${YELLOW}Box may already be deleted: $box_id${NC}"
            }
            timeout {
                puts "${RED}Timeout while cleaning up box: $box_id${NC}"
            }
        }
    }
}

puts "\n${YELLOW}All tests completed${NC}\n"
exit 0

# --- Start of new delete tests ---

# Create a running box for delete tests
puts "\n${YELLOW}Creating a running box for delete tests...${NC}"
spawn go run ../main.go box create --image alpine:latest --name running_delete_test -- sleep 300
set running_box_id ""
expect {
    -re "Box created with ID \"([^\\"]+)\"" {
        set running_box_id $expect_out(1,string)
        lappend test_box_ids $running_box_id
        puts "\n${GREEN}PASS: Running box created: $running_box_id${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Creating running box timed out${NC}\n"
        # Cannot continue these tests
    }
    "Error:" {
        puts "\n${RED}FAIL: Error creating running box${NC}\n"
         # Cannot continue these tests
    }
}
sleep 2

# Create a stopped box for delete tests
puts "\n${YELLOW}Creating a stopped box for delete tests...${NC}"
spawn go run ../main.go box create --image alpine:latest --name stopped_delete_test -- echo "stopped"
set stopped_box_id ""
expect {
    -re "Box created with ID \"([^\\"]+)\"" {
        set stopped_box_id $expect_out(1,string)
        lappend test_box_ids $stopped_box_id
        puts "\n${GREEN}PASS: Stopped box created: $stopped_box_id${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Creating stopped box timed out${NC}\n"
         # Cannot continue these tests
    }
    "Error:" {
        puts "\n${RED}FAIL: Error creating stopped box${NC}\n"
         # Cannot continue these tests
    }
}
sleep 1

# Test deleting a running box WITHOUT --force (should fail or prompt)
if {$running_box_id ne ""} {
    puts "\n${YELLOW}Testing delete running box without --force...${NC}"
    spawn go run ../main.go box delete $running_box_id
    expect {
        "Error:" {
            puts "\n${GREEN}PASS: Correctly prevented deletion of running box without --force${NC}\n"
        }
        "error deleting" {
             puts "\n${GREEN}PASS: Correctly prevented deletion of running box without --force${NC}\n"
        }
        "Are you sure?" { # Handle potential interactive prompt
            puts "\n${GREEN}PASS: Prompted for confirmation (expected)${NC}\n"
            send "n\r" ;# Send 'no'
            expect eof
        }
        timeout {
            puts "\n${RED}FAIL: Deleting running box without --force timed out${NC}\n"
        }
    }
}

# Test deleting a running box WITH --force
if {$running_box_id ne ""} {
    puts "\n${YELLOW}Testing delete running box with --force...${NC}"
    spawn go run ../main.go box delete $running_box_id --force
    expect {
        "Box deleted successfully" {
            puts "\n${GREEN}PASS: Running box deleted successfully with --force${NC}\n"
            set test_box_ids [lsearch -all -inline -not $test_box_ids $running_box_id] ; # Remove from list
        }
        "deleted successfully" {
            puts "\n${GREEN}PASS: Running box deleted successfully with --force${NC}\n"
             set test_box_ids [lsearch -all -inline -not $test_box_ids $running_box_id] ; # Remove from list
        }
        timeout {
            puts "\n${RED}FAIL: Deleting running box with --force timed out${NC}\n"
        }
        "Error:" {
            puts "\n${RED}FAIL: Error deleting running box with --force${NC}\n"
        }
    }
}

# Test deleting a stopped box
if {$stopped_box_id ne ""} {
    puts "\n${YELLOW}Testing delete stopped box...${NC}"
    spawn go run ../main.go box delete $stopped_box_id
    expect {
        "Box deleted successfully" {
            puts "\n${GREEN}PASS: Stopped box deleted successfully${NC}\n"
             set test_box_ids [lsearch -all -inline -not $test_box_ids $stopped_box_id] ; # Remove from list
        }
         "deleted successfully" {
            puts "\n${GREEN}PASS: Stopped box deleted successfully${NC}\n"
             set test_box_ids [lsearch -all -inline -not $test_box_ids $stopped_box_id] ; # Remove from list
        }
        timeout {
            puts "\n${RED}FAIL: Deleting stopped box timed out${NC}\n"
        }
        "Error:" {
            puts "\n${RED}FAIL: Error deleting stopped box${NC}\n"
        }
    }
}

# Create boxes again for --all tests
puts "\n${YELLOW}Recreating boxes for --all tests...${NC}"
spawn go run ../main.go box create --image alpine:latest --name all_test_1 -- echo "all1"
set all_box_1 ""
expect { -re "ID \"([^\\"]+)\"" { set all_box_1 $expect_out(1,string); lappend test_box_ids $all_box_1; puts "Created all_test_1: $all_box_1"} timeout {puts "FAIL timeout 1"} }
spawn go run ../main.go box create --image alpine:latest --name all_test_2 -- sleep 10
set all_box_2 ""
expect { -re "ID \"([^\\"]+)\"" { set all_box_2 $expect_out(1,string); lappend test_box_ids $all_box_2; puts "Created all_test_2: $all_box_2"} timeout {puts "FAIL timeout 2"} }
sleep 2

# Test --all WITHOUT --force (should fail or prompt)
puts "\n${YELLOW}Testing --all without --force...${NC}"
spawn go run ../main.go box delete --all
expect {
    "Error:" { # Expected if it refuses due to running container
        puts "\n${GREEN}PASS: Correctly prevented --all deletion without --force${NC}\n"
    }
    "error deleting" {
        puts "\n${GREEN}PASS: Correctly prevented --all deletion without --force${NC}\n"
    }
    "Are you sure?" { # Handle potential interactive prompt
         puts "\n${GREEN}PASS: Prompted for confirmation for --all (expected)${NC}\n"
         send "n\r" ;# Send 'no'
         expect eof
    }
    timeout {
        puts "\n${RED}FAIL: --all without --force timed out${NC}\n"
    }
    # If it somehow succeeds, it's unexpected but log it
    "All boxes deleted successfully" {
        puts "\n${YELLOW}UNEXPECTED: --all without --force succeeded?${NC}\n"
        set test_box_ids {}
    }
}

# Test --all --output json (should delete remaining boxes)
puts "\n${YELLOW}Testing --all --output json --force...${NC}"
# Use force here assuming the previous test might have left boxes
spawn go run ../main.go box delete --all --output json --force
expect {
    -re "\"status\":\"success\"" {
        puts "\n${GREEN}PASS: Received JSON success for --all delete${NC}\n"
        set test_box_ids {} ; # Clear the list as all should be gone
    }
     -re "\"message\":" {
        puts "\n${GREEN}PASS: Received JSON message for --all delete${NC}\n"
        set test_box_ids {} ; # Clear the list as all should be gone
    }
    timeout {
        puts "\n${RED}FAIL: --all --output json timed out${NC}\n"
    }
    "Error:" {
        puts "\n${RED}FAIL: Error during --all --output json${NC}\n"
    }
}

# --- End of new delete tests ---

# Test specifying both box ID and --all (should fail)
puts "\n${YELLOW}Testing specifying both box ID and --all...${NC}"
spawn go run ../main.go box delete some-id --all

# Expect error message
expect {
    "Error: Cannot specify both --all and a box ID" {
        puts "\n${GREEN}PASS: Correctly handled conflicting arguments${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting error message timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${GREEN}PASS: Correctly reported error${NC}\n"
    }
}

# Clean up any remaining resources (should be none, but just in case)
if {[llength $test_box_ids] > 0} {
    puts "\n${YELLOW}Cleaning up any remaining test resources...${NC}\n"
    foreach box_id $test_box_ids {
        spawn go run ../main.go box delete $box_id --force
        expect {
            "Box deleted successfully" {
                puts "${GREEN}Cleaned up box: $box_id${NC}"
            }
            "Error:" {
                # Box may already be deleted
                puts "${YELLOW}Box may already be deleted: $box_id${NC}"
            }
            timeout {
                puts "${RED}Timeout while cleaning up box: $box_id${NC}"
            }
        }
    }
}

puts "\n${YELLOW}All tests completed${NC}\n"
exit 0 