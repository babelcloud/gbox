#!/usr/bin/expect -f
#
# Test script for gbox box create command
#

# Set timeout in seconds
set timeout 10

# Define colors for output readability
set GREEN "\033\[0;32m"
set RED "\033\[0;31m"
set YELLOW "\033\[0;33m"
set NC "\033\[0m" ;# No Color

# List to store box IDs created during testing
set test_box_ids {}

# Start gbox command
puts "\n${YELLOW}Testing basic box creation...${NC}"
spawn go run ../main.go box create --image alpine:latest -- echo "Hello World"

# Expect success message
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        # Store the ID in the list
        lappend test_box_ids $expect_out(1,string)
        puts "\n${GREEN}PASS: Box created successfully${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Box creation timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Box creation error${NC}\n"
        exit 1
    }
}

# Test --help option
puts "\n${YELLOW}Testing help display...${NC}"
spawn go run ../main.go box create --help

# Expect help information
expect {
    "Usage: gbox box create" {
        puts "\n${GREEN}PASS: Help information displayed correctly${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting help information timed out${NC}\n"
        exit 1
    }
}

# Test JSON output format
puts "\n${YELLOW}Testing JSON output format...${NC}"
spawn go run ../main.go box create --output json --image python:3.9 -- python3 -c "print('Hello')"

# Expect JSON response
expect {
    -re "\"id\": \"(\[^\"\]+)\"" {
        # Store the ID in the list
        lappend test_box_ids $expect_out(1,string)
        puts "\n${GREEN}PASS: Received JSON format response${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting JSON response timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error getting JSON response${NC}\n"
        exit 1
    }
}

# Test environment variable setting
puts "\n${YELLOW}Testing environment variable setting...${NC}"
spawn go run ../main.go box create --image alpine:latest --env TEST_VAR=test_value -- env

# Expect command to execute successfully
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        # Store the ID in the list
        lappend test_box_ids $expect_out(1,string)
        puts "\n${GREEN}PASS: Box with environment variables created successfully${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Creating box with environment variables timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error creating box with environment variables${NC}\n"
        exit 1
    }
}

# Test label setting
puts "\n${YELLOW}Testing label setting...${NC}"
spawn go run ../main.go box create --image alpine:latest --label project=test --label env=dev -- echo "Test with labels"

# Expect command to execute successfully
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        # Store the ID in the list
        lappend test_box_ids $expect_out(1,string)
        puts "\n${GREEN}PASS: Box with labels created successfully${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Creating box with labels timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error creating box with labels${NC}\n"
        exit 1
    }
}

# Test working directory setting (--work-dir)
puts "\n${YELLOW}Testing working directory setting...${NC}"
spawn go run ../main.go box create --image alpine:latest --work-dir /app -- pwd

# Expect command to execute successfully
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        # Store the ID in the list
        lappend test_box_ids $expect_out(1,string)
        puts "\n${GREEN}PASS: Box with working directory created successfully${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Creating box with working directory timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error creating box with working directory${NC}\n"
        exit 1
    }
}

# Test working directory shorthand (-w)
puts "\n${YELLOW}Testing working directory shorthand...${NC}"
spawn go run ../main.go box create --image alpine:latest -w /tmp -- pwd

# Expect command to execute successfully
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        # Store the ID in the list
        lappend test_box_ids $expect_out(1,string)
        puts "\n${GREEN}PASS: Box with working directory (shorthand) created successfully${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Creating box with working directory (shorthand) timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error creating box with working directory (shorthand)${NC}\n"
        exit 1
    }
}

# Test combined parameters
puts "\n${YELLOW}Testing combined parameters...${NC}"
spawn go run ../main.go box create --image alpine:latest --env TEST_VAR=value1 --env DEBUG=true -w /app --label service=api --label stage=dev -- echo "Combined options test"

# Expect command to execute successfully
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        # Store the ID in the list
        lappend test_box_ids $expect_out(1,string)
        puts "\n${GREEN}PASS: Box with combined options created successfully${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Creating box with combined options timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error creating box with combined options${NC}\n"
        exit 1
    }
}

# Test creating with an invalid image name
puts "\n${YELLOW}Testing creation with invalid image name...${NC}"
spawn go run ../main.go box create --image invalid-image-name-that-does-not-exist:latest -- echo "This should fail"

# Expect an error message
expect {
    "Error:" {
        puts "\n${GREEN}PASS: Handled invalid image name correctly${NC}\n"
    }
    "error" {
        puts "\n${GREEN}PASS: Handled invalid image name correctly${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Invalid image name test timed out${NC}\n"
        exit 1
    }
}

# Test creating without a command after '--'
puts "\n${YELLOW}Testing creation without command after '--'...${NC}"
spawn go run ../main.go box create --image alpine:latest --

# Expect an error message or specific behavior (adjust based on actual implementation)
# Option 1: Expect an error
expect {
    "Error:" {
        puts "\n${GREEN}PASS: Handled missing command correctly (reported error)${NC}\n"
    }
    "error" {
         puts "\n${GREEN}PASS: Handled missing command correctly (reported error)${NC}\n"
    }
    # Option 2: Expect successful creation with default behavior (e.g., runs shell)
    # -re "Box created with ID \\"([^\\"]+)\\"" {
    #     lappend test_box_ids $expect_out(1,string)
    #     puts "\\n${GREEN}PASS: Handled missing command correctly (created box with default cmd)${NC}\\n"
    # }
    timeout {
        puts "\n${RED}FAIL: Missing command test timed out${NC}\n"
        exit 1
    }
}

# Cleanup resources created during testing
puts "\n${YELLOW}Cleaning up test resources...${NC}\n"
foreach box_id $test_box_ids {
    spawn go run ../main.go box delete $box_id
    expect {
        "Box deleted successfully" {
            puts "${GREEN}Cleaned up box: $box_id${NC}"
        }
        "Error:" {
            puts "${RED}Failed to clean up box: $box_id${NC}"
        }
        timeout {
            puts "${RED}Timeout while cleaning up box: $box_id${NC}"
        }
    }
}

puts "\n${YELLOW}All tests completed${NC}\n"
exit 0 