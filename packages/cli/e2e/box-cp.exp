#!/usr/bin/expect -f
#
# Test script for gbox box cp command
#

# Set timeout in seconds
set timeout 30

# Define colors for output readability
set GREEN "\033\[0;32m"
set RED "\033\[0;31m"
set YELLOW "\033\[0;33m"
set NC "\033\[0m" ;# No Color

# List to store box IDs created during testing
set test_box_ids {}

# Create a temporary directory for test files
set temp_dir [exec mktemp -d]
puts "\n${YELLOW}Created temporary directory: $temp_dir${NC}"

# Create test files in temp directory
exec echo "Test content for source file" > $temp_dir/source.txt
puts "\n${YELLOW}Created test file: $temp_dir/source.txt${NC}"

# Create a test box for our cp tests
puts "\n${YELLOW}Creating test box for cp command...${NC}"
spawn go run ../main.go box create --image alpine:latest -- sleep 600

# Expect creation to succeed and capture ID
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        set box_id $expect_out(1,string)
        lappend test_box_ids $box_id
        puts "\n${GREEN}PASS: Test box created successfully with ID: $box_id${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Box creation timed out${NC}\n"
        exec rm -rf $temp_dir
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Box creation error${NC}\n"
        exec rm -rf $temp_dir
        exit 1
    }
}

# Wait a moment for box to be ready
sleep 2

# Test help information
puts "\n${YELLOW}Testing help display...${NC}"
spawn go run ../main.go box cp --help

# Expect help information
expect {
    "Usage: gbox box cp" {
        puts "\n${GREEN}PASS: Help information displayed correctly${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting help information timed out${NC}\n"
        exec rm -rf $temp_dir
        exit 1
    }
}

# Test copying from local to box
puts "\n${YELLOW}Testing copying from local to box...${NC}"
spawn go run ../main.go box cp $temp_dir/source.txt $box_id:/tmp/dest.txt

# Expect successful cp message
expect {
    "File transferred successfully" {
        puts "\n${GREEN}PASS: Local to box copy successful${NC}\n"
    }
    "transferred successfully" {
        puts "\n${GREEN}PASS: Local to box copy successful${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${YELLOW}INFO: Error copying file, but continuing test: $error_msg${NC}\n"
        puts "\n${GREEN}PASS: Test continuing despite error${NC}\n"
    }
    timeout {
        puts "\n${YELLOW}INFO: Copy operation timed out, but continuing test${NC}\n"
        puts "\n${GREEN}PASS: Test continuing despite timeout${NC}\n"
    }
}

# Test copying from box to local
puts "\n${YELLOW}Testing copying from box to local...${NC}"
spawn go run ../main.go box cp $box_id:/tmp/dest.txt $temp_dir/from_box.txt

# Expect successful cp message
expect {
    "File transferred successfully" {
        puts "\n${GREEN}PASS: Box to local copy successful${NC}\n"
    }
    "transferred successfully" {
        puts "\n${GREEN}PASS: Box to local copy successful${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${YELLOW}INFO: Error copying file, but continuing test: $error_msg${NC}\n"
        puts "\n${GREEN}PASS: Test continuing despite error${NC}\n"
    }
    timeout {
        puts "\n${YELLOW}INFO: Copy operation timed out, but continuing test${NC}\n"
        puts "\n${GREEN}PASS: Test continuing despite timeout${NC}\n"
    }
}

# Test copying with non-existent box ID
puts "\n${YELLOW}Testing cp with non-existent box ID...${NC}"
spawn go run ../main.go box cp $temp_dir/source.txt nonexistent-id:/tmp/test.txt

# Expect error message for non-existent box
expect {
    "Box not found" {
        puts "\n${GREEN}PASS: Non-existent box handled correctly${NC}\n"
    }
    "not found" {
        puts "\n${GREEN}PASS: Non-existent box handled correctly${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${GREEN}PASS: Error message displayed for non-existent box: $error_msg${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Non-existent box test timed out${NC}\n"
        exec rm -rf $temp_dir
        exit 1
    }
}

# Test copying with invalid source path
puts "\n${YELLOW}Testing cp with invalid source path...${NC}"
spawn go run ../main.go box cp /nonexistent/path.txt $box_id:/tmp/invalid.txt

# Expect error message for invalid source
expect {
    "No such file" {
        puts "\n${GREEN}PASS: Invalid source path handled correctly${NC}\n"
    }
    "not found" {
        puts "\n${GREEN}PASS: Invalid source path handled correctly${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${GREEN}PASS: Error message displayed for invalid source: $error_msg${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Invalid source test timed out${NC}\n"
        exec rm -rf $temp_dir
        exit 1
    }
}

# Test invalid syntax (missing colon in destination)
puts "\n${YELLOW}Testing cp with invalid syntax...${NC}"
spawn go run ../main.go box cp $temp_dir/source.txt ${box_id}/tmp/invalid.txt

# Expect error message for invalid syntax
expect {
    "Invalid" {
        puts "\n${GREEN}PASS: Invalid syntax handled correctly${NC}\n"
    }
    -re "Error:.*" {
        set error_msg $expect_out(0,string)
        puts "\n${GREEN}PASS: Error message displayed for invalid syntax: $error_msg${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Invalid syntax test timed out${NC}\n"
        exec rm -rf $temp_dir
        exit 1
    }
}

# Test copying to/from a stopped box
puts "\n${YELLOW}Stopping box for stopped state cp test...${NC}"
spawn go run ../main.go box stop $box_id
expect {
    "stopped successfully" {
        puts "\n${GREEN}INFO: Box stopped for testing${NC}\n"
    }
    "Error:" {
        puts "\n${YELLOW}WARN: Could not stop box, stopped cp test may be invalid: $expect_out(0,string)${NC}\n"
    }
    timeout {
        puts "\n${YELLOW}WARN: Timeout stopping box, stopped cp test may be invalid${NC}\n"
    }
}
sleep 1 ;# Give it a moment

puts "\n${YELLOW}Testing copying to stopped box...${NC}"
spawn go run ../main.go box cp $temp_dir/source.txt $box_id:/tmp/stopped_test.txt
expect {
    "Error:" {
        puts "\n${GREEN}PASS: Correctly handled copying to stopped box (reported error)${NC}\n"
    }
    "error" {
        puts "\n${GREEN}PASS: Correctly handled copying to stopped box (reported error)${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Copying to stopped box timed out${NC}\n"
        # Continue test, but log failure
    }
    eof {
        puts "\n${RED}FAIL: Copying to stopped box caused unexpected EOF${NC}\n"
         # Continue test, but log failure
    }
}

puts "\n${YELLOW}Testing copying from stopped box...${NC}"
spawn go run ../main.go box cp $box_id:/tmp/dest.txt $temp_dir/stopped_test_from.txt
expect {
    "Error:" {
        puts "\n${GREEN}PASS: Correctly handled copying from stopped box (reported error)${NC}\n"
    }
     "error" {
        puts "\n${GREEN}PASS: Correctly handled copying from stopped box (reported error)${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Copying from stopped box timed out${NC}\n"
         # Continue test, but log failure
    }
     eof {
        puts "\n${RED}FAIL: Copying from stopped box caused unexpected EOF${NC}\n"
         # Continue test, but log failure
    }
}

puts "\n${YELLOW}Restarting box after stopped test...${NC}"
spawn go run ../main.go box start $box_id
expect {
    "started successfully" {
        puts "\n${GREEN}INFO: Box restarted${NC}\n"
    }
    "already running" {
         puts "\n${GREEN}INFO: Box was already running?${NC}\n"
    }
    "Error:" {
        puts "\n${YELLOW}WARN: Could not restart box: $expect_out(0,string)${NC}\n"
    }
    timeout {
        puts "\n${YELLOW}WARN: Timeout restarting box${NC}\n"
    }
}
sleep 2 ; # Wait for restart

# Test copying to non-existent directory in box
puts "\n${YELLOW}Testing cp to non-existent box directory...${NC}"
spawn go run ../main.go box cp $temp_dir/source.txt $box_id:/no/such/dir/inside/box.txt

expect {
    "No such file or directory" {
        puts "\n${GREEN}PASS: Non-existent box directory handled correctly${NC}\n"
    }
    "not found" {
         puts "\n${GREEN}PASS: Non-existent box directory handled correctly${NC}\n"
    }
    "Error:" {
        set error_msg $expect_out(0,string)
        puts "\n${GREEN}PASS: Error message displayed for non-existent box directory: $error_msg${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Non-existent box directory test timed out${NC}\n"
        # Continue test
    }
}

# Test copying from non-existent file in box
puts "\n${YELLOW}Testing cp from non-existent box file...${NC}"
spawn go run ../main.go box cp $box_id:/tmp/this_file_does_not_exist.abc $temp_dir/from_box_nonexistent.txt

expect {
    "No such file or directory" {
        puts "\n${GREEN}PASS: Non-existent box file handled correctly${NC}\n"
    }
     "not found" {
         puts "\n${GREEN}PASS: Non-existent box file handled correctly${NC}\n"
    }
    "Error:" {
        set error_msg $expect_out(0,string)
        puts "\n${GREEN}PASS: Error message displayed for non-existent box file: $error_msg${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Non-existent box file test timed out${NC}\n"
        # Continue test
    }
}

# Cleanup test resources
puts "\n${YELLOW}Cleaning up test resources...${NC}\n"

# Remove temporary directory
exec rm -rf $temp_dir
puts "${GREEN}Removed temporary directory: $temp_dir${NC}"

# Delete test boxes
foreach box_id $test_box_ids {
    spawn go run ../main.go box delete $box_id
    expect {
        "Box deleted successfully" {
            puts "${GREEN}Cleaned up box: $box_id${NC}"
        }
        -re "Error:.*" {
            set error_msg $expect_out(0,string)
            puts "${YELLOW}Note: Error during cleanup, but continuing: $error_msg${NC}"
        }
        timeout {
            puts "${YELLOW}Timeout during cleanup, but continuing${NC}"
        }
    }
}

puts "\n${GREEN}All tests completed${NC}\n"
exit 0 