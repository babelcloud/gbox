#!/usr/bin/expect -f
#
# Test script for gbox box list command
#

# Set timeout in seconds
set timeout 10

# Define colors for output readability
set GREEN "\033\[0;32m"
set RED "\033\[0;31m"
set YELLOW "\033\[0;33m"
set NC "\033\[0m" ;# No Color

# List to store box IDs created during testing
set test_box_ids {}

# Start basic list command
puts "\n${YELLOW}Testing basic list command...${NC}"
spawn go run ../main.go box list

# Expect to see ID column header or no boxes message
expect {
    "ID" {
        puts "\n${GREEN}PASS: List command executed successfully${NC}\n"
    }
    "No boxes found" {
        puts "\n${GREEN}PASS: Correct message displayed when no boxes found${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting box list timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error getting box list${NC}\n"
        exit 1
    }
}

# Test help information
puts "\n${YELLOW}Testing help display...${NC}"
spawn go run ../main.go box list --help

# Expect help information
expect {
    "Usage: gbox box list" {
        puts "\n${GREEN}PASS: Help information displayed correctly${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting help information timed out${NC}\n"
        exit 1
    }
}

# Test JSON output format
puts "\n${YELLOW}Testing JSON output format...${NC}"
spawn go run ../main.go box list --output json

# Expect JSON format response
expect {
    "\"boxes\":" {
        puts "\n${GREEN}PASS: Received JSON format response${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Getting JSON response timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error getting JSON response${NC}\n"
        exit 1
    }
}

# Create test boxes with different properties for filter testing
puts "\n${YELLOW}Creating test boxes for filter testing...${NC}"

# Create a box with specific label for label filter testing
spawn go run ../main.go box create --image alpine:latest --label test_label=filter_test -- sleep 5

# Expect creation to succeed and capture ID
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        set label_test_id $expect_out(1,string)
        lappend test_box_ids $label_test_id
        puts "\n${GREEN}PASS: Test box for label filter created successfully with ID: $label_test_id${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Creating test box for label filter timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error creating test box for label filter${NC}\n"
        exit 1
    }
}

# Create a box with specific image for image filter testing
spawn go run ../main.go box create --image ubuntu:latest -- sleep 5

# Expect creation to succeed and capture ID
expect {
    -re "Box created with ID \"(\[^\"\]+)\"" {
        set image_test_id $expect_out(1,string)
        lappend test_box_ids $image_test_id
        puts "\n${GREEN}PASS: Test box for image filter created successfully with ID: $image_test_id${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Creating test box for image filter timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error creating test box for image filter${NC}\n"
        exit 1
    }
}

# Wait a moment to ensure boxes are created
sleep 2

# Test label filter
puts "\n${YELLOW}Testing label filter...${NC}"
spawn go run ../main.go box list -f "label=test_label=filter_test"

# Expect to find box with specified label
expect {
    -re ".*$label_test_id.*" {
        puts "\n${GREEN}PASS: Label filtering working correctly${NC}\n"
    }
    "No boxes found" {
        puts "\n${RED}FAIL: Box with specified label not found${NC}\n"
        exit 1
    }
    timeout {
        puts "\n${RED}FAIL: Label filtering timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error with label filtering${NC}\n"
        exit 1
    }
}

# Test ID filter
puts "\n${YELLOW}Testing ID filter...${NC}"
spawn go run ../main.go box list -f "id=$label_test_id"

# Expect to find specific box by ID
expect {
    -re ".*$label_test_id.*" {
        puts "\n${GREEN}PASS: ID filtering working correctly${NC}\n"
    }
    "No boxes found" {
        puts "\n${RED}FAIL: Box with specified ID not found${NC}\n"
        exit 1
    }
    timeout {
        puts "\n${RED}FAIL: ID filtering timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error with ID filtering${NC}\n"
        exit 1
    }
}

# Test image filter
puts "\n${YELLOW}Testing image filter...${NC}"
spawn go run ../main.go box list -f "ancestor=ubuntu:latest"

# Expect to find box using ubuntu image
expect {
    -re ".*ubuntu:latest.*" {
        puts "\n${GREEN}PASS: Image filtering working correctly${NC}\n"
    }
    "No boxes found" {
        puts "\n${RED}FAIL: Box with specified image not found${NC}\n"
        exit 1
    }
    timeout {
        puts "\n${RED}FAIL: Image filtering timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error with image filtering${NC}\n"
        exit 1
    }
}

# Test invalid filter
puts "\n${YELLOW}Testing invalid filter...${NC}"
spawn go run ../main.go box list -f "invalid=value"

# Expect error message for invalid filter
expect {
    "Error:" {
        puts "\n${GREEN}PASS: Invalid filter properly rejected${NC}\n"
    }
    timeout {
        puts "\n${RED}FAIL: Testing invalid filter timed out${NC}\n"
        exit 1
    }
}

# Test filter shorthand notation
puts "\n${YELLOW}Testing filter shorthand notation...${NC}"
spawn go run ../main.go box list -f "id=$image_test_id"

# Expect to find specific box by ID with shorthand filter
expect {
    -re ".*$image_test_id.*" {
        puts "\n${GREEN}PASS: Filter shorthand (-f) working correctly${NC}\n"
    }
    "No boxes found" {
        puts "\n${RED}FAIL: Box not found with shorthand filter${NC}\n"
        exit 1
    }
    timeout {
        puts "\n${RED}FAIL: Shorthand filter test timed out${NC}\n"
        exit 1
    }
    "Error:" {
        puts "\n${RED}FAIL: Error with shorthand filter${NC}\n"
        exit 1
    }
}

# Cleanup resources created during testing
puts "\n${YELLOW}Cleaning up test resources...${NC}\n"
foreach box_id $test_box_ids {
    spawn go run ../main.go box delete $box_id
    expect {
        "Box deleted successfully" {
            puts "${GREEN}Cleaned up box: $box_id${NC}"
        }
        "Error:" {
            puts "${RED}Failed to clean up box: $box_id${NC}"
        }
        timeout {
            puts "${RED}Timeout while cleaning up box: $box_id${NC}"
        }
    }
}

puts "\n${YELLOW}All tests completed${NC}\n"
exit 0 