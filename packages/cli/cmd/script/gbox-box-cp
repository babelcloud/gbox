#!/usr/bin/env bash

# gbox-box-cp - Copy files/folders between a box and the local filesystem

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common"

# Enable debug logging if DEBUG is set
debug() {
    if [ "${DEBUG:-}" = "true" ]; then
        echo "[DEBUG] $*" >&2
    fi
}

# Command specific help content
CMD_NAME="gbox box cp"
CMD_SHORT_DESC="Copy files/folders between a box and the local filesystem"
CMD_USAGE="gbox box cp <src> <dst>"

CMD_ARGS=$(cat <<'EOF'
    <src>  Source path. Can be:
           - Local file/directory path (e.g., ./local_file, /tmp/data)
           - Box path in format BOX_ID:SRC_PATH (e.g., 550e8400-e29b-41d4-a716-446655440000:/work)
           - "-" to read from stdin (must be a tar stream)
    
    <dst>  Destination path. Can be:
           - Local file/directory path (e.g., /tmp/app_logs)
           - Box path in format BOX_ID:DST_PATH (e.g., 550e8400-e29b-41d4-a716-446655440000:/work)
           - "-" to write to stdout (as tar stream)
EOF
)

CMD_EXAMPLES=$(cat <<'EOF'
    # Copy local file to box
    gbox box cp ./local_file 550e8400-e29b-41d4-a716-446655440000:/work

    # Copy from box to local
    gbox box cp 550e8400-e29b-41d4-a716-446655440000:/var/logs/ /tmp/app_logs

    # Copy tar stream from stdin to box
    tar czf - ./local_dir | gbox box cp - 550e8400-e29b-41d4-a716-446655440000:/work

    # Copy from box to stdout as tar stream
    gbox box cp 550e8400-e29b-41d4-a716-446655440000:/etc/hosts - | tar xzf -

    # Copy directory from local to box
    gbox box cp ./app_data 550e8400-e29b-41d4-a716-446655440000:/data/

    # Copy directory from box to local
    gbox box cp 550e8400-e29b-41d4-a716-446655440000:/var/logs/ /tmp/app_logs/
EOF
)

# Help message wrapper
help() {
    show_help "${1:-all}" "$CMD_NAME" "$CMD_SHORT_DESC" "$CMD_USAGE" "" "$CMD_ARGS" "$CMD_EXAMPLES"
}

# Parse box ID and path from a path string
# Returns: box_id path
parse_box_path() {
    local path="$1"
    if [[ "$path" =~ ^([^:]+):(.+)$ ]]; then
        echo "${BASH_REMATCH[1]} ${BASH_REMATCH[2]}"
    else
        echo ""
    fi
}

# Check if a path is a box path (contains ':')
is_box_path() {
    [[ "$1" == *":"* ]]
}

# Check archive format and extract accordingly
# Usage: check_and_extract_archive <temp_file> <dst_dir> <dst_name>
check_and_extract_archive() {
    local temp_file="$1"
    local dst_dir="$2"
    local dst_name="$3"
    
    # Check if it's a gzipped file
    if gunzip -t "$temp_file" 2>/dev/null; then
        tar -xzf "$temp_file" -C "$dst_dir" "$dst_name"
    else
        # Try regular tar
        tar -xf "$temp_file" -C "$dst_dir" "$dst_name"
    fi
}

# Convert relative path to absolute path
# If path doesn't exist, use dirname to get the absolute path
get_absolute_path() {
    local path="$1"
    if [ -e "$path" ]; then
        realpath "$path"
    else
        echo "$(cd "$(dirname "$path")" 2>/dev/null && pwd)/$(basename "$path")"
    fi
}

# Main command handler
if [ "$1" = "--help" ] || [ "$1" = "help" ]; then
    help "${2:-all}"
    exit 0
fi

if [ $# -ne 2 ]; then
    help
    exit 1
fi

src="$1"
dst="$2"

# Get API server URL
api_url="http://localhost:28080/api/v1"

# Determine copy direction and handle accordingly
if is_box_path "$src" && ! is_box_path "$dst"; then
    # Copy from box to local
    read -r box_id src_path <<< "$(parse_box_path "$src")"
    if [ -z "$box_id" ] || [ -z "$src_path" ]; then
        echo "Error: Invalid source path format. Use BOX_ID:SRC_PATH"
        exit 1
    fi

    debug "Box ID: $box_id"
    debug "Source path: $src_path"
    debug "Destination: $dst"

    if [ "$dst" = "-" ]; then
        # Copy from box to stdout as tar stream
        request_url="$api_url/boxes/$box_id/archive?path=$src_path"
        debug "Making GET request to: $request_url"
        
        # Make request and capture both stdout and stderr
        response=$(curl -v -X GET "$request_url" 2>&1)
        exit_code=$?
        
        debug "Curl exit code: $exit_code"
        debug "Curl response: $response"
        
        if [ $exit_code -ne 0 ]; then
            echo "Error: Failed to download from box" >&2
            exit 1
        fi
        
        echo "$response"
    else
        # Convert local path to absolute path
        dst=$(get_absolute_path "$dst")
        debug "Absolute destination path: $dst"
        
        # Copy from box to local file
        mkdir -p "$(dirname "$dst")"
        
        # Download to temporary file first
        temp_file=$(mktemp)
        debug "Created temporary file: $temp_file"
        
        request_url="$api_url/boxes/$box_id/archive?path=$src_path"
        debug "Making GET request to: $request_url"
        
        # Make request and capture both stdout and stderr
        response=$(curl -v -X GET "$request_url" 2>&1 > "$temp_file")
        exit_code=$?
        
        debug "Curl exit code: $exit_code"
        debug "Curl response: $response"
        
        if [ $exit_code -ne 0 ]; then
            rm "$temp_file"
            echo "Error: Failed to download from box" >&2
            exit 1
        fi
        
        # Check format and extract
        debug "Extracting archive to: $(dirname "$dst")"
        check_and_extract_archive "$temp_file" "$(dirname "$dst")" "$(basename "$src_path")"
        
        # Clean up
        rm "$temp_file"
        echo "Copied from box $box_id:$src_path to $dst" >&2
    fi

elif ! is_box_path "$src" && is_box_path "$dst"; then
    # Copy from local to box
    read -r box_id dst_path <<< "$(parse_box_path "$dst")"
    if [ -z "$box_id" ] || [ -z "$dst_path" ]; then
        echo "Error: Invalid destination path format. Use BOX_ID:DST_PATH"
        exit 1
    fi

    debug "Box ID: $box_id"
    debug "Destination path: $dst_path"
    debug "Source: $src"

    if [ "$src" = "-" ]; then
        # Copy tar stream from stdin to box
        request_url="$api_url/boxes/$box_id/archive?path=$dst_path"
        debug "Making PUT request to: $request_url"
        
        response=$(curl -v -X PUT \
            -H "Content-Type: application/x-tar" \
            --data-binary "@-" \
            "$request_url" 2>&1)
        exit_code=$?
        
        debug "Curl exit code: $exit_code"
        debug "Curl response: $response"
        
        if [ $exit_code -ne 0 ]; then
            echo "Error: Failed to upload to box" >&2
            exit 1
        fi
        
        echo "Copied from stdin to box $box_id:$dst_path" >&2
    else
        # Convert local path to absolute path
        src=$(get_absolute_path "$src")
        debug "Absolute source path: $src"
        
        if [ ! -e "$src" ]; then
            echo "Error: Source file or directory does not exist: $src"
            exit 1
        fi
        
        # Copy from local file to box
        temp_tar=$(mktemp)
        debug "Created temporary tar file: $temp_tar"
        
        tar -czf "$temp_tar" -C "$(dirname "$src")" "$(basename "$src")"
        debug "Created tar archive of: $src"

        request_url="$api_url/boxes/$box_id/archive?path=$dst_path"
        debug "Making PUT request to: $request_url"
        
        # Upload archive to box
        response=$(curl -v -X PUT \
            -H "Content-Type: application/x-tar" \
            -H "Content-Length: $(stat -f%z "$temp_tar")" \
            --data-binary "@$temp_tar" \
            "$request_url" 2>&1)
        exit_code=$?
        
        debug "Curl exit code: $exit_code"
        debug "Curl response: $response"

        # Clean up temporary file
        rm "$temp_tar"
        
        if [ $exit_code -ne 0 ]; then
            echo "Error: Failed to upload to box" >&2
            exit 1
        fi
        
        echo "Copied from $src to box $box_id:$dst_path" >&2
    fi

else
    echo "Error: Invalid path format. One path must be a box path (BOX_ID:SRC_PATH) and the other must be a local path"
    exit 1
fi 