#!/usr/bin/env python3

import sys
import json
import os
import struct
import threading
import socket
import termios
import fcntl
import array
import select
import http.client

# Constants
BUFFER_SIZE = 4096
MEDIA_TYPE_RAW_STREAM = "application/vnd.gbox.raw-stream"
MEDIA_TYPE_MULTIPLEXED_STREAM = "application/vnd.gbox.multiplexed-stream"
DEBUG = os.environ.get('DEBUG', '').lower() in ('true', '1', 'yes')

def debug_log(message):
    """Print debug message if DEBUG mode is enabled"""
    if DEBUG:
        print(f"DEBUG: {message}", file=sys.stderr)

def print_error(message):
    """Print error message to stderr"""
    print(f"Error: {message}", file=sys.stderr)

def handle_error_response(response):
    """Handle error response from server"""
    try:
        response_body = response.read()
        debug_log(f"Response body: {response_body.decode('utf-8')}")
        
        try:
            error_data = json.loads(response_body.decode('utf-8'))
            if isinstance(error_data, dict) and 'message' in error_data:
                print_error(error_data['message'])
            else:
                print_error(f"Server returned status code {response.status}")
            if DEBUG:
                debug_log(f"Full error response: {error_data}")
        except json.JSONDecodeError:
            print_error(f"Server returned status code {response.status}: {response_body.decode('utf-8')}")
    except Exception as e:
        print_error(f"Failed to parse error response: {e}")
    sys.exit(1)

def get_terminal_size():
    """Get the current terminal size"""
    if not os.isatty(sys.stdin.fileno()):
        return None
    
    # Get window size
    ws = array.array('H', [0, 0, 0, 0])  # [row, col, xpixel, ypixel]
    try:
        fcntl.ioctl(sys.stdout.fileno(), termios.TIOCGWINSZ, ws)
        return {'height': ws[0], 'width': ws[1]}
    except:
        return None

def set_raw_mode(fd):
    """Set terminal to raw mode"""
    if not os.isatty(fd):
        return None
    
    old = termios.tcgetattr(fd)
    new = termios.tcgetattr(fd)
    
    # Input modes
    new[0] &= ~(termios.BRKINT | termios.ICRNL | termios.INPCK | 
                termios.ISTRIP | termios.IXON)
    
    # Output modes - disable post processing
    new[1] &= ~(termios.OPOST)
    
    # Control modes - set 8 bit chars
    new[2] &= ~(termios.CSIZE | termios.PARENB)
    new[2] |= termios.CS8
    
    # Local modes
    new[3] &= ~(termios.ECHO | termios.ICANON | termios.IEXTEN | 
                termios.ISIG)
    
    # Control chars
    new[6][termios.VMIN] = 1
    new[6][termios.VTIME] = 0
    
    # Put terminal in raw mode after flushing
    termios.tcsetattr(fd, termios.TCSAFLUSH, new)
    return old

def restore_terminal(fd, old):
    """Restore terminal settings"""
    if old is not None:
        termios.tcsetattr(fd, termios.TCSAFLUSH, old)

def handle_raw_stream(conn):
    """Handle raw stream (TTY mode)"""
    old_settings = set_raw_mode(sys.stdin.fileno())
    
    try:
        while True:
            try:
                r, _, _ = select.select([conn, sys.stdin], [], [])
                
                for fd in r:
                    if fd is conn:
                        # Read from connection
                        data = conn.recv(BUFFER_SIZE)
                        if not data:
                            return
                        sys.stdout.buffer.write(data)
                        sys.stdout.buffer.flush()
                    else:
                        # Read from stdin
                        data = sys.stdin.buffer.read1(BUFFER_SIZE)
                        if not data:
                            try:
                                conn.shutdown(socket.SHUT_WR)
                            except:
                                pass
                            continue
                        conn.send(data)
            except Exception as e:
                print(f"Error in raw stream: {e}", file=sys.stderr)
                break
    finally:
        restore_terminal(sys.stdin.fileno(), old_settings)
        try:
            conn.close()
        except:
            pass

def handle_multiplexed_stream(conn):
    """Handle multiplexed stream (non-TTY mode)"""
    while True:
        try:
            # Read 8-byte header
            header = conn.recv(8)
            if not header:
                break

            # Parse header
            stream_type = header[0]
            size = struct.unpack('>I', header[4:])[0]

            # Read payload
            if size > 0:
                payload = conn.recv(size)
                if not payload:
                    break

                # Write to appropriate output
                if stream_type == 1:  # stdout
                    sys.stdout.buffer.write(payload)
                    sys.stdout.buffer.flush()
                elif stream_type == 2:  # stderr
                    sys.stderr.buffer.write(payload)
                    sys.stderr.buffer.flush()
        except Exception as e:
            print(f"Error reading from multiplexed stream: {e}", file=sys.stderr)
            break

def send_stdin(sock):
    """Send stdin data to the server"""
    try:
        while True:
            # Read line by line
            line = sys.stdin.readline()
            if not line:
                sock.shutdown(socket.SHUT_WR)
                break
            sock.send(line.encode())
    except Exception as e:
        print(f"Error sending stdin: {e}", file=sys.stderr)

def parse_args():
    """Parse command line arguments"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='Execute a command in a box',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
    gbox box exec 550e8400-e29b-41d4-a716-446655440000 -- ls -l     # List files in box
    gbox box exec 550e8400-e29b-41d4-a716-446655440000 -t -- bash     # Run interactive bash
    gbox box exec 550e8400-e29b-41d4-a716-446655440000 -i -- cat       # Run cat with stdin
        """.strip()
    )
    parser.add_argument('box_id', help='ID of the box')
    parser.add_argument('-i', '--interactive', action='store_true',
                       help='Enable interactive mode (with stdin)')
    parser.add_argument('-t', '--tty', action='store_true',
                       help='Force TTY allocation')
    
    # Find the index of '--' in sys.argv
    try:
        cmd_index = sys.argv.index('--')
    except ValueError:
        # If no '--' found, check if it's a help request
        if '--help' in sys.argv or '-h' in sys.argv:
            parser.print_help()
            sys.exit(0)
        parser.error("Command must be specified after '--'")
    
    # Parse only the arguments before '--'
    args = parser.parse_args(sys.argv[1:cmd_index])
    
    # Store the command (everything after '--')
    args.command = sys.argv[cmd_index + 1:]
    if not args.command:
        parser.error("Command cannot be empty")
    
    return args

def main():
    """Main function"""
    args = parse_args()

    # Check if stdin is available and interactive mode is enabled
    stdin_available = args.interactive  # Enable stdin if -i flag is set
    if not stdin_available and not os.isatty(0):
        stdin_available = True  # Also enable stdin if there's pipe input

    # Get terminal size if in TTY mode
    term_size = None
    if args.tty:
        term_size = get_terminal_size()
        debug_log(f"Terminal size: {term_size}")

    # Prepare request body
    request = {
        "cmd": [args.command[0]],  # First element is the command
        "args": args.command[1:],   # Rest are arguments
        "stdin": stdin_available or args.tty,  # Always enable stdin in TTY mode
        "stdout": True,
        "stderr": True,
        "tty": args.tty
    }
    if term_size:
        request["term_size"] = term_size
    
    debug_log(f"Request body: {json.dumps(request, indent=2)}")

    # Create HTTP connection
    conn = http.client.HTTPConnection('localhost', 28080)
    
    # Prepare headers based on TTY mode
    headers = {
        "Content-Type": "application/json",
        "Upgrade": "tcp",
        "Connection": "Upgrade"
    }
    if args.tty:
        # In TTY mode, use raw stream
        headers["Accept"] = MEDIA_TYPE_RAW_STREAM
    else:
        # In non-TTY mode, use multiplexed stream
        headers["Accept"] = MEDIA_TYPE_MULTIPLEXED_STREAM
    
    debug_log(f"Request headers: {json.dumps(headers, indent=2)}")

    try:
        # Send request
        debug_log(f"Sending request to: POST /api/v1/boxes/{args.box_id}/exec")
        conn.request('POST', f'/api/v1/boxes/{args.box_id}/exec', 
                    json.dumps(request), headers)
        
        # Get response
        response = conn.getresponse()
        debug_log(f"Response status: {response.status}")
        debug_log(f"Response headers: {dict(response.getheaders())}")
        
        # Check response status
        if response.status not in (200, 101):
            handle_error_response(response)
            return

        # Get the raw socket
        sock = response.fp.raw._sock

        # Handle streams based on mode
        if args.tty:
            handle_raw_stream(sock)
        else:
            # Start stdin thread if needed
            stdin_thread = None
            if stdin_available:
                stdin_thread = threading.Thread(
                    target=send_stdin,
                    args=(sock,)
                )
                stdin_thread.daemon = True
                stdin_thread.start()

            # Handle the multiplexed stream
            try:
                handle_multiplexed_stream(sock)
            except KeyboardInterrupt:
                pass
            finally:
                sock.close()
                if stdin_thread and stdin_thread.is_alive():
                    stdin_thread.join(timeout=1.0)

    finally:
        conn.close()

if __name__ == '__main__':
    main() 