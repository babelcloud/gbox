#!/usr/bin/env bash

# gbox-cluster - Handles cluster setup and cleanup operations
# Usage: gbox-cluster <command>

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common"

CONFIG_FILE="$GBOX_HOME/config.yml"

# Command specific help content
CMD_NAME="gbox cluster"
CMD_SHORT_DESC="Manage clusters (setup/cleanup)"
CMD_USAGE="gbox cluster <command> [options]"

CMD_COMMANDS=$(cat <<'EOF'
    setup         Setup box environment
    cleanup       Clean up box environment and remove all boxes
EOF
)

CMD_EXAMPLES=$(cat <<'EOF'
    gbox cluster setup --mode docker    # Initialize box environment with docker mode
    gbox cluster setup --mode k8s       # Initialize box environment with k8s mode
    gbox cluster cleanup               # Remove all boxes and cleanup
EOF
)

# Help message wrapper
help() {
    show_help "${1:-all}" "$CMD_NAME" "$CMD_SHORT_DESC" "$CMD_USAGE" "$CMD_COMMANDS" "$CMD_EXAMPLES"
}

# Get current mode from config file
get_current_mode() {
    if [ -f "$CONFIG_FILE" ]; then
        mode=$(yq eval '.cluster.mode' "$CONFIG_FILE")
        if [ "$mode" != "null" ]; then
            echo "$mode"
            return 0
        fi
    fi
    echo ""
}

# Save mode to config file
save_mode() {
    local mode="$1"
    mkdir -p "$(dirname "$CONFIG_FILE")"
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "cluster:" > "$CONFIG_FILE"
        echo "  mode: $mode" >> "$CONFIG_FILE"
    else
        yq eval ".cluster.mode = \"$mode\"" -i "$CONFIG_FILE"
    fi
}

# Setup command
setup() {
    local mode="docker"  # Set default mode here
    local current_mode=$(get_current_mode)

    mkdir -p "$GBOX_HOME"
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --mode)
                mode="$2"
                shift 2
                ;;
            --help)
                show_help "$2" "gbox cluster setup" "Setup box environment" \
                    "gbox cluster setup [--mode docker|k8s]" \
                    "    --mode      Cluster mode (docker or k8s, default: docker)" \
                    "    gbox cluster setup --mode docker    # Initialize box environment with docker mode"
                return
                ;;
            *)
                echo "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # If no mode specified in command line, use current mode if exists
    if [ "$mode" = "docker" ] && [ -n "$current_mode" ]; then
        mode="$current_mode"
    fi
    
    # Validate mode
    if [ "$mode" != "docker" ] && [ "$mode" != "k8s" ]; then
        echo "Invalid mode: $mode. Must be either 'docker' or 'k8s'"
        exit 1
    fi
    
    # Check if mode changed
    if [ -n "$current_mode" ] && [ "$current_mode" != "$mode" ]; then
        echo "Error: Cannot change mode from '$current_mode' to '$mode' without cleanup"
        echo "Please run 'gbox cluster cleanup' first"
        exit 1
    fi
    
    # Save mode to config
    save_mode "$mode"
    
    # Execute mode-specific setup
    if [ "$mode" = "docker" ]; then
        "$SCRIPT_DIR/gbox-cluster-docker" setup
    else
        "$SCRIPT_DIR/gbox-cluster-k8s" setup
    fi
}

# Cleanup command
cleanup() {
    local force=false

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --force)
                force=true
                shift
                ;;
            --help)
                show_help "$2" "gbox cluster cleanup" "Clean up box environment" \
                    "gbox cluster cleanup [--force]" \
                    "    --force     Skip confirmation prompt" \
                    "    gbox cluster cleanup    # Remove all boxes and cleanup"
                return
                ;;
            *)
                echo "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # Exit early if no config file exists
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "Cluster already cleaned up."
        exit 0
    fi
    
    # Get current mode
    local mode=$(get_current_mode)
    
    # Ask for confirmation unless --force is used
    if [ "$force" != "true" ]; then
        if [ -n "$mode" ]; then
            read -p "This will remove all boxes in $mode mode. Continue? (y/N) " confirm
        else
            read -p "This will remove all boxes. Continue? (y/N) " confirm
        fi
        if [[ ! $confirm =~ ^[yY][eE]?[sS]?$ ]]; then
            echo "Cleanup cancelled"
            exit 0
        fi
    fi
    
    if [ -n "$mode" ]; then
        # Execute mode-specific cleanup
        "$SCRIPT_DIR/gbox-cluster-$mode" cleanup
    else
        # Try to cleanup both modes
        "$SCRIPT_DIR/gbox-cluster-docker" cleanup 2>/dev/null || true
        "$SCRIPT_DIR/gbox-cluster-k8s" cleanup 2>/dev/null || true
    fi
    
    # Remove config file after cleanup
    rm -f "$CONFIG_FILE"
}

# Main command handler
case "$1" in
    setup)
        shift
        setup "$@"
        ;;
    cleanup)
        shift
        cleanup "$@"
        ;;
    --help|help)
        help "${2:-all}"
        exit 0
        ;;
    *)
        help
        [[ "$1" != "" ]] && exit 1
        exit 0
        ;;
esac
