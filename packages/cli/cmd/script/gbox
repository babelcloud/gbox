#!/bin/bash

# gbox - Main command for box management
# Usage: gbox <command> [arguments]

set -e

# Get the real path of the script, following symlinks
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
CLI_ROOT="$(cd "$SCRIPT_DIR/../../" && pwd)"  # 从 script 到 cmd，再到 cli
REPO_ROOT="$(cd "$CLI_ROOT/../.." && pwd)"  # 从 cli 到 packages，再到根目录
SCRIPT_IMPL_DIR="$REPO_ROOT/packages/cli/cmd/script"

# Source common functions
source "$SCRIPT_DIR/common"

# Command aliases using parallel arrays
ALIAS_NAMES=(setup cleanup export)
ALIAS_CMDS=("cluster setup" "cluster cleanup" "mcp export")

# Create symlink based on mode
create_symlink() {
    local target_path="$1"
    local symlink_paths=("${@:2}")  # Get all arguments starting from the second one as an array
    local description="$target_path"
    
    for symlink_path in "${symlink_paths[@]}"; do
        ln -sf "$target_path" "$symlink_path"
    done
    
    # Set description based on target path
    if [[ "$target_path" == "$go_binary" ]]; then
        description="Go binary in production mode"
    elif [[ "$target_path" == "$go_runner_script" ]]; then
        description="Go implementation in development mode"
    fi
    
    # Generate a comma-separated list of symlink paths
    local symlinks_str=$(printf ", %s" "${symlink_paths[@]}")
    symlinks_str=${symlinks_str:2}  # Remove leading ", "
    
    debug_log "Created symlinks: $symlinks_str → $target_path ($description)"
}

# Ensure required directories and files exist
ensure_box_symlinks() {
    # Load environment configuration from .env file
    load_dotenv

    # Export DEBUG variable for subprocesses
    export DEBUG
    
    # Parse GO_IMPL environment variable for commands that should use Go implementation
    local go_impl_arr=()
    if [[ -n "$GO_IMPL" ]]; then
        IFS=',' read -r -a go_impl_arr <<< "$GO_IMPL"
    fi

    local symlinks_created=false
    local go_runner_script="$CLI_ROOT/bin/gbox"
    
    # Detect current platform
    local os=$(uname -s | tr '[:upper:]' '[:lower:]')
    local arch=$(uname -m)
    
    # Map architecture names
    case "$arch" in
        x86_64)
            arch="amd64"
            ;;
        aarch64|arm64)
            arch="arm64"
            ;;
    esac
    
    # Map OS names
    case "$os" in
        darwin|linux)
            # These match binary naming convention
            ;;
        *)
            # Default to current platform
            echo "Warning: Unsupported OS: $os" >&2
            ;;
    esac
    
    local binary_suffix=""
    if [[ "$os" == "windows" ]]; then
        binary_suffix=".exe"
    fi
    
    # Set path to the platform-specific binary
    local go_binary="$CLI_ROOT/build/gbox-${os}-${arch}${binary_suffix}"
    
    # Also check for the default binary as fallback
    local default_binary="$CLI_ROOT/build/gbox"
    
    # Check if we're in production mode (DEV_MODE=false)
    if [[ "$DEV_MODE" != "true" ]]; then
        # In production mode, use the binary directly (assuming it's built by 'make build')
        if [[ ! -f "$go_binary" ]]; then
            if [[ -f "$default_binary" ]]; then
                echo "Platform-specific binary not found, using default binary instead."
                go_binary="$default_binary"
            else
                echo "Warning: Neither platform-specific ($go_binary) nor default binary found. Please run 'cd $CLI_ROOT && make build' first." >&2
            fi
        fi
        
        if [[ -f "$go_binary" ]]; then
            debug_log "Using binary: $go_binary"
            chmod +x "$go_binary" # Ensure it's executable
        fi
    else
        # In development mode, use the script
        if [[ ! -f "$go_runner_script" ]]; then
            echo "Error: CLI gbox script not found at $go_runner_script" >&2
            exit 1
        fi
        chmod +x "$go_runner_script"
    fi
    
    # if $GBOX_BIN does not exist, create it
    if [[ ! -d "$GBOX_BIN" ]]; then
        mkdir -p "$GBOX_BIN"
    fi

    # Create version command symlinks
    local version_symlink="$GBOX_BIN/gbox-version"
    local gbox_symlink="$GBOX_BIN/gbox"
    local common_symlink="$GBOX_BIN/common"
    
    if [[ "$DEV_MODE" != "true" ]]; then
        create_symlink "$go_binary" "$version_symlink" "$gbox_symlink"
    else
        create_symlink "$go_runner_script" "$version_symlink" "$gbox_symlink"
    fi
    
    # Create symlink for common file
    create_symlink "$SCRIPT_DIR/common" "$common_symlink"
    
    symlinks_created=true
    
    # Dynamically discover box subcommands
    local box_subcommands=()
    
    # Check Bash script files to discover subcommands
    local IMPL_DIR="$REPO_ROOT/packages/cli/cmd/script"
    if [[ -d "$IMPL_DIR" ]]; then
        for script_file in "$IMPL_DIR"/gbox-box-*; do
            if [[ -f "$script_file" ]]; then
                # Extract subcommand from filename (gbox-box-list -> list)
                local file_name=$(basename "$script_file")
                local cmd_name=${file_name#gbox-box-}
                box_subcommands+=("$cmd_name")
            fi
        done
    fi
    
    # If no subcommands found, use a default list as fallback
    if [[ ${#box_subcommands[@]} -eq 0 ]]; then
        box_subcommands=("list" "create" "delete" "exec" "start" "stop" "inspect" "reclaim" "cp")
        debug_log "Warning: No box subcommands discovered, using default list"
    else
        debug_log "Discovered box subcommands: ${box_subcommands[*]}"
    fi

    # Process each box subcommand
    for subcmd in "${box_subcommands[@]}"; do
        local symlink_path="$GBOX_BIN/gbox-box-$subcmd"
        
        # Determine if this command should use Go implementation
        local use_go=false
        for go_cmd in "${go_impl_arr[@]}"; do
            if [[ "$go_cmd" == "box_$subcmd" || "$go_cmd" == "all" ]]; then
                use_go=true
                break
            fi
        done
        
        if [[ "$use_go" == "true" ]]; then
            if [[ "$DEV_MODE" != "true" ]]; then
                create_symlink "$go_binary" "$symlink_path"
            else
                create_symlink "$go_runner_script" "$symlink_path"
            fi
            symlinks_created=true
        else
            # Look for bash implementation
            local script_path="$SCRIPT_IMPL_DIR/gbox-box-${subcmd}"
            if [[ ! -f "$script_path" ]]; then
                echo "Error: Cannot find bash implementation ($script_path) for $subcmd" >&2
                exit 1
            fi
            
            # Create symlink to bash script
            create_symlink "$script_path" "$symlink_path"
            symlinks_created=true
        fi
    done
    
    if [[ "$symlinks_created" == "true" ]]; then
        debug_log "All required symlinks have been created."
    fi
}

# Get alias command by name
get_alias() {
    local name="$1"
    local i
    for i in "${!ALIAS_NAMES[@]}"; do
        if [[ "${ALIAS_NAMES[$i]}" == "$name" ]]; then
            echo "${ALIAS_CMDS[$i]}"
            return 0
        fi
    done
    echo ""
}

# Help message
help() {
    local help_type="${1:-all}"
    
    case "$help_type" in
        short)
            echo "Box management tool"
            return 0
            ;;
        all)
            cat <<EOF
Usage: gbox <command> [arguments]

Available Commands:
EOF
            # Show aliases first
            for alias in "${ALIAS_NAMES[@]}"; do
                local cmd="$(get_alias "$alias")"
                local -a parts
                IFS=' ' read -r -a parts <<< "$cmd"
                local cmd_script="$SCRIPT_DIR/gbox-${parts[0]}"
                if [[ -x "$cmd_script" ]]; then
                    # Get description from the subcommand's help short
                    description=$("$cmd_script" "${parts[1]}" --help short 2>/dev/null || echo "${parts[0]} ${parts[1]}")
                    printf "    %-18s %s\n" "$alias" "$description"
                fi
            done
            printf "    %-18s %s\n" "help" "Show help information"
            printf "    %-18s %s\n" "version" "Show version information"

            echo ""
            echo "Sub Commands:"
            # Get short descriptions from subcommands
            for cmd in box cluster mcp; do
                if [[ -x "$SCRIPT_DIR/gbox-$cmd" ]]; then
                    description=$("$SCRIPT_DIR/gbox-$cmd" --help short 2>/dev/null || echo "$cmd operations")
                    printf "    %-18s %s\n" "$cmd" "$description"
                fi
            done

            cat <<EOF

Options:
    --help [short|all]  Show this help message (default: all)
    --version          Show version information

Configuration:
    GO_IMPL             Comma-separated list of commands to use Go implementation
                        (e.g. GO_IMPL=box_list,box_create or GO_IMPL=all)
                        Can be set in .env file or as an environment variable
    DEV_MODE            Development mode (true/false)
                        In development mode (true), uses go run for Go implementations
                        In production mode (false), uses pre-built binaries
                        Can be set in .env file or as an environment variable

Examples:
    gbox setup                 # Initialize the environment
    gbox box create mybox      # Create a new box
    gbox box list              # List all boxes
    gbox export                # Export MCP configuration
    gbox cleanup               # Clean up everything
    gbox version               # Show version information
    
    # Using .env file:
    # Add GO_IMPL=box_list,box_create to .env file
    # Add DEV_MODE=false to use pre-built binaries
    
    # Or use environment variables:
    # GO_IMPL=box_list,box_create DEV_MODE=false gbox box list

Use "gbox <command> --help" for more information about a command.
EOF
            ;;
        *)
            echo "Invalid help type: $help_type" >&2
            echo "Valid types are: short, all" >&2
            return 1
            ;;
    esac
}

# Execute aliased command
execute_alias() {
    local alias_name="$1"
    shift
    local cmd="$(get_alias "$alias_name")"
    local -a parts
    IFS=' ' read -r -a parts <<< "$cmd"
    local target_script="gbox-${parts[0]}"
    if [[ ${#parts[@]} -gt 1 ]]; then
        exec "$SCRIPT_DIR/$target_script" "${parts[1]}" "$@"
    else
        exec "$SCRIPT_DIR/$target_script" "$@"
    fi
}

# Main command handler
case "$1" in
    box)
        # Ensure box symlinks exist before executing box commands
        ensure_box_symlinks
        
        if [[ "$DEV_MODE" != "true" && -f "$go_binary" ]]; then
            # Execute the binary with all original arguments
            debug_log "Executing: $go_binary $@"
            exec "$go_binary" "$@"
        elif [[ -x "$SCRIPT_DIR/gbox-$1" ]]; then
            cmd="$1"
            shift
            exec "$SCRIPT_DIR/gbox-$cmd" "$@"
        else
            echo "Error: Command '$1' not found" >&2
            exit 1
        fi
        ;;
    version)
        ensure_box_symlinks
        exec "$GBOX_BIN/gbox-version"
        ;;
    cluster|mcp)
        cmd="$1"
        shift
        if [[ -x "$SCRIPT_DIR/gbox-$cmd" ]]; then
            exec "$SCRIPT_DIR/gbox-$cmd" "$@"
        else
            echo "Error: Command '$cmd' not found" >&2
            exit 1
        fi
        ;;
    --help)
        help "${2:-all}"
        ;;
    help)
        help "${2:-all}"
        ;;
    --version)
        ensure_box_symlinks
        exec "$GBOX_BIN/gbox" --version
        ;;
    *)
        if [[ -n "$1" ]] && [ -n "$(get_alias "$1")" ]; then
            execute_alias "$@"
        else
            help
            [[ -n "$1" ]] && exit 1
            exit 0
        fi
        ;;
esac
