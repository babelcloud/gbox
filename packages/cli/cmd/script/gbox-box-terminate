#!/usr/bin/env bash

# gbox-box-terminate - Terminates a box by its ID

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common"

# Command specific help content
CMD_NAME="gbox box terminate"
CMD_SHORT_DESC="Terminate a box by its ID"
CMD_USAGE="gbox box terminate [options] <id>"

CMD_COMMANDS=$(cat <<'EOF'
    --output          Output format (json or text, default: text)
    --all            Terminate all boxes
    --force          Force terminate without confirmation
EOF
)

CMD_EXAMPLES=$(cat <<'EOF'
    gbox box terminate 550e8400-e29b-41d4-a716-446655440000              # Terminate a box
    gbox box terminate --all --force                                     # Terminate all boxes without confirmation
    gbox box terminate --all                                            # Terminate all boxes with confirmation
    gbox box terminate 550e8400-e29b-41d4-a716-446655440000 --output json  # Terminate a box and output JSON
EOF
)

# Help message wrapper
help() {
    show_help "${1:-all}" "$CMD_NAME" "$CMD_SHORT_DESC" "$CMD_USAGE" "$CMD_COMMANDS" "$CMD_EXAMPLES"
}

# Box terminate command
terminate() {
    local output_format="text"
    local box_id=""
    local terminate_all=false
    local force=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --help)
                show_help "$2" "gbox box terminate" "Terminate a box by its ID" \
                    "gbox box terminate [options] <id>" \
                    "    <id>            ID of the box to terminate\n    --output          Output format (json or text, default: text)\n    --all            Terminate all boxes\n    --force          Force terminate without confirmation" \
                    "    gbox box terminate 550e8400-e29b-41d4-a716-446655440000              # Terminate a box\n    gbox box terminate --all --force                                     # Terminate all boxes without confirmation\n    gbox box terminate --all                                            # Terminate all boxes with confirmation\n    gbox box terminate 550e8400-e29b-41d4-a716-446655440000 --output json  # Terminate a box and output JSON"
                return
                ;;
            --output)
                shift
                if [[ "$1" != "json" && "$1" != "text" ]]; then
                    echo "Error: Invalid output format. Must be 'json' or 'text'"
                    exit 1
                fi
                output_format="$1"
                shift
                ;;
            --all)
                terminate_all=true
                shift
                ;;
            --force)
                force=true
                shift
                ;;
            -*)
                echo "Error: Unknown option $1"
                exit 1
                ;;
            *)
                if [[ -z "$box_id" ]]; then
                    box_id="$1"
                    shift
                else
                    echo "Error: Unexpected argument $1"
                    exit 1
                fi
                ;;
        esac
    done

    # Validate arguments
    if [[ "$terminate_all" == "true" && -n "$box_id" ]]; then
        echo "Error: Cannot specify both --all and a box ID"
        exit 1
    fi

    if [[ "$terminate_all" == "false" && -z "$box_id" ]]; then
        echo "Error: Either --all or a box ID must be specified"
        exit 1
    fi

    # Handle terminate all
    if [[ "$terminate_all" == "true" ]]; then
        # Get list of all boxes
        local api_url="http://localhost:28080/api/v1/boxes"
        local response
        
        if ! response=$(curl -s -f "$api_url"); then
            echo "Error: Failed to get list of boxes" >&2
            if [[ "$DEBUG" == "true" ]]; then
                echo "Response:" >&2
                echo "$response" >&2
            fi
            exit 1
        fi

        # Debug: Print response if in debug mode
        if [[ "$DEBUG" == "true" ]]; then
            echo "API Response:" >&2
            echo "$response" | jq '.' >&2
        fi

        # Parse box IDs
        local box_ids
        box_ids=$(echo "$response" | jq -r '.boxes[].id')
        
        if [[ -z "$box_ids" ]]; then
            if [[ "$output_format" == "json" ]]; then
                echo "{\"status\":\"success\",\"message\":\"No boxes to terminate\"}"
            else
                echo "No boxes to terminate"
            fi
            return
        fi

        # Show boxes to be terminated
        echo "The following boxes will be terminated:"
        echo "$box_ids" | while read -r id; do
            echo "  - $id"
        done
        echo

        # Confirm termination if not forced
        if [[ "$force" == "false" ]]; then
            read -p "Are you sure you want to terminate all boxes? [y/N] " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                if [[ "$output_format" == "json" ]]; then
                    echo "{\"status\":\"cancelled\",\"message\":\"Operation cancelled by user\"}"
                else
                    echo "Operation cancelled"
                fi
                return
            fi
        fi

        # Terminate all boxes
        local success=true
        echo "$box_ids" | while read -r id; do
            if ! curl -s -f -X DELETE -H "Content-Type: application/json" -d '{"force":true}' "http://localhost:28080/api/v1/boxes/$id" > /dev/null; then
                echo "Error: Failed to terminate box $id" >&2
                success=false
            fi
        done

        if [[ "$success" == "true" ]]; then
            if [[ "$output_format" == "json" ]]; then
                echo "{\"status\":\"success\",\"message\":\"All boxes terminated successfully\"}"
            else
                echo "All boxes terminated successfully"
            fi
        else
            if [[ "$output_format" == "json" ]]; then
                echo "{\"status\":\"error\",\"message\":\"Some boxes failed to terminate\"}"
            else
                echo "Some boxes failed to terminate"
            fi
            exit 1
        fi
        return
    fi

    # Terminate single box
    local api_url="http://localhost:28080/api/v1/boxes/$box_id"
    local response
    
    # Make API call and handle potential errors
    if ! response=$(curl -s -f -X DELETE -H "Content-Type: application/json" -d '{"force":true}' "$api_url"); then
        echo "Error: Failed to terminate box. Make sure the API server is running and the ID '$box_id' is correct" >&2
        if [[ "$DEBUG" == "true" ]]; then
            echo "Response:" >&2
            echo "$response" >&2
        fi
        exit 1
    fi

    if [[ "$output_format" == "json" ]]; then
        echo "{\"status\":\"success\",\"message\":\"Box terminated successfully\"}"
    else
        echo "Box terminated successfully"
    fi
}

# Main command handler
case "$1" in
    --help|help)
        help "${2:-all}"
        exit 0
        ;;
    *)
        terminate "$@"
        ;;
esac 