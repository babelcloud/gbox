import { withLogging } from "../utils.js";
import { config } from "../config.js";
import { GBox } from "../sdk/index.js";
import { MCPLogger } from "../mcp-logger.js";
import { z } from "zod";

export const RUN_TYPESCRIPT_TOOL = "run-typescript";
export const RUN_TYPESCRIPT_DESCRIPTION = `Run TypeScript code in a sandbox. 
The TypeScript environment comes with tsx pre-installed for fast TypeScript execution.
The following packages are pre-installed globally: typescript, tsx, @types/node.
Native ESM support is enabled by default - you can use 'import/export' syntax directly in your code.
To install additional npm packages, use run-bash tool to execute 'npm install -g <package-name>'.
The default working directory is /var/gbox.
To persist files after sandbox reclamation, save them to /var/gbox/share directory. 
Files in this directory will be retained for a period of time after the sandbox is reclaimed.

To read files generated by your program, use the read-file tool with the boxId returned from this tool.`;

export const runTypescriptParams = {
  code: z
    .string()
    .describe(
      `The TypeScript code to run. This code will be executed through tsx directly and will not be saved to a file.`
    ),
  boxId: z.string().optional()
    .describe(`The ID of an existing box to run the code in.
      If not provided, the system will try to reuse an existing box with matching image.
      The system will first try to use a running box, then a stopped box (which will be started), and finally create a new one if needed.
      Note that without boxId, multiple calls may use different boxes even if they exist.
      If you need to ensure multiple calls use the same box, you must provide a boxId.
      You can get the list of existing boxes by using the list-boxes tool.
      `),
};

export const handleRunTypescript = withLogging(
  async (log, { boxId, code }, { signal, sessionId }) => {
    const logger = new MCPLogger(log);
    const gbox = new GBox({
      apiUrl: config.apiServer.url,
      logger,
    });

    logger.info(
      `Executing TypeScript code in box: ${boxId || "new box"} ${
        sessionId ? `for session: ${sessionId}` : ""
      }`
    );

    // Get or create box
    const id = await gbox.box.getOrCreateBox({
      boxId,
      image: config.images.typescript,
      sessionId,
      signal,
    });

    // Execute TypeScript code directly through stdin
    const result = await gbox.box.runInBox(
      id,
      ["tsx", "-"], // Use '-' to read from stdin
      code,
      100, // stdoutLineLimit
      100, // stderrLineLimit
      { signal, sessionId }
    );

    log({ level: "info", data: "TypeScript code executed successfully" });
    return {
      content: [
        {
          type: "text" as const,
          text: JSON.stringify(result, null, 2),
        },
      ],
    };
  }
);
